(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{356:function(v,e,_){"use strict";_.r(e);var t=_(8),a=Object(t.a)({},(function(){var v=this,e=v._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h1",{attrs:{id:"vue"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue"}},[v._v("#")]),v._v(" Vue")]),v._v(" "),e("h2",{attrs:{id:"_1-谈一谈对-mvvm-的理解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-谈一谈对-mvvm-的理解"}},[v._v("#")]),v._v(" 1. 谈一谈对 "),e("em",[v._v("MVVM")]),v._v(" 的理解？")]),v._v(" "),e("blockquote",[e("p",[v._v("参考答案：")]),v._v(" "),e("ul",[e("li",[e("em",[v._v("MVVM")]),v._v(" 是 "),e("em",[v._v("Model-View-ViewModel")]),v._v(" 的缩写。"),e("em",[v._v("MVVM")]),v._v(" 是一种设计思想。")]),v._v(" "),e("li",[e("em",[v._v("Model")]),v._v(" 层代表数据模型，也可以在 "),e("em",[v._v("Model")]),v._v(" 中定义数据修改和操作的业务逻辑;")]),v._v(" "),e("li",[e("em",[v._v("View")]),v._v(" 代表 "),e("em",[v._v("UI")]),v._v(" 组件，它负责将数据模型转化成 "),e("em",[v._v("UI")]),v._v(" 展现出来，"),e("em",[v._v("View")]),v._v(" 是一个同步 "),e("em",[v._v("View")]),v._v(" 和 "),e("em",[v._v("Model")]),v._v(" 的对象")]),v._v(" "),e("li",[v._v("在 "),e("em",[v._v("MVVM")]),v._v(" 架构下，"),e("em",[v._v("View")]),v._v(" 和 "),e("em",[v._v("Model")]),v._v(" 之间并没有直接的联系，而是通过 "),e("em",[v._v("ViewModel")]),v._v(" 进行交互， "),e("em",[v._v("Model")]),v._v(" 和 "),e("em",[v._v("ViewModel")]),v._v(" 之间的交互是双向的， 因此 "),e("em",[v._v("View")]),v._v(" 数据的变化会同步到 "),e("em",[v._v("Model")]),v._v(" 中，而 "),e("em",[v._v("Model")]),v._v(" 数据的变化也会立即反应到 "),e("em",[v._v("View")]),v._v(" 上。")]),v._v(" "),e("li",[v._v("对 "),e("em",[v._v("ViewModel")]),v._v(" 通过双向数据绑定把 "),e("em",[v._v("View")]),v._v(" 层和 "),e("em",[v._v("Model")]),v._v(" 层连接了起来，而 "),e("em",[v._v("View")]),v._v(" 和 "),e("em",[v._v("Model")]),v._v(" 之间的 同步工作完全是自动的，无需人为干涉，因此开发者只需关注业务逻辑，不需要手动操作 "),e("em",[v._v("DOM")]),v._v("，不需要关注数据状态的同步问题，复杂的数据状态维护完全由 "),e("em",[v._v("MVVM")]),v._v(" 来统一管理。")])])]),v._v(" "),e("h2",{attrs:{id:"_2-说一下-vue-的优点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-说一下-vue-的优点"}},[v._v("#")]),v._v(" 2. 说一下 "),e("em",[v._v("Vue")]),v._v(" 的优点")]),v._v(" "),e("blockquote",[e("p",[v._v("参考答案：")]),v._v(" "),e("p",[e("em",[v._v("Vue")]),v._v(" 是一个构建数据驱动的 "),e("em",[v._v("Web")]),v._v(" 界面的渐进式框架。")]),v._v(" "),e("p",[e("em",[v._v("Vue")]),v._v(" 的目标是通过尽可能简单的 "),e("em",[v._v("API")]),v._v(" 实现响应的数据绑定和组合的视图组件。核心是一个响应的数据绑定系统。")]),v._v(" "),e("p",[v._v("关于 "),e("em",[v._v("Vue")]),v._v(" 的优点，主要有响应式编程、组件化开发、虚拟 "),e("em",[v._v("DOM")])]),v._v(" "),e("p",[v._v("响应式编程")]),v._v(" "),e("p",[v._v("这里的响应式不是 "),e("em",[v._v("@media")]),v._v(" 媒体查询中的响应式布局，而是指 "),e("em",[v._v("Vue")]),v._v(" 会自动对页面中某些数据的变化做出响应。这也就是 "),e("em",[v._v("Vue")]),v._v(" 最大的优点，通过 "),e("em",[v._v("MVVM")]),v._v(" 思想实现数据的双向绑定，让开发者不用再操作 "),e("em",[v._v("DOM")]),v._v(" 对象，有更多的时间去思考业务逻辑。")]),v._v(" "),e("p",[v._v("组件化开发")]),v._v(" "),e("p",[e("em",[v._v("Vue")]),v._v(" 通过组件，把一个单页应用中的各种模块拆分到一个一个单独的组件（"),e("em",[v._v("component")]),v._v("）中，我们只要先在父级应用中写好各种组件标签（占坑），并且在组件标签中写好要传入组件的参数（就像给函数传入参数一样，这个参数叫做组件的属性），然后再分别写好各种组件的实现（填坑），然后整个应用就算做完了。")]),v._v(" "),e("p",[v._v("组件化开发的优点：提高开发效率、方便重复使用、简化调试步骤、提升整个项目的可维护性、便于协同开发。")]),v._v(" "),e("p",[v._v("虚拟 "),e("em",[v._v("DOM")])]),v._v(" "),e("p",[v._v("在传统开发中，用 "),e("em",[v._v("JQuery")]),v._v(" 或者原生的 "),e("em",[v._v("JavaScript DOM")]),v._v(" 操作函数对 "),e("em",[v._v("DOM")]),v._v(" 进行频繁操作的时候，浏览器要不停的渲染新的 "),e("em",[v._v("DOM")]),v._v(" 树，导致在性能上面的开销特别的高。")]),v._v(" "),e("p",[v._v("而 "),e("em",[v._v("Virtual DOM")]),v._v(" 则是虚拟 "),e("em",[v._v("DOM")]),v._v(" 的英文，简单来说，他就是一种可以预先通过 "),e("em",[v._v("JavaScript")]),v._v(" 进行各种计算，把最终的 "),e("em",[v._v("DOM")]),v._v(" 操作计算出来并优化，由于这个 "),e("em",[v._v("DOM")]),v._v(" 操作属于预处理操作，并没有真实的操作 "),e("em",[v._v("DOM")]),v._v("，所以叫做虚拟 "),e("em",[v._v("DOM")]),v._v("。最后在计算完毕才真正将 "),e("em",[v._v("DOM")]),v._v(" 操作提交，将 "),e("em",[v._v("DOM")]),v._v(" 操作变化反映到 "),e("em",[v._v("DOM")]),v._v(" 树上。")])]),v._v(" "),e("h2",{attrs:{id:"_3-解释一下对-vue-生命周期的理解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-解释一下对-vue-生命周期的理解"}},[v._v("#")]),v._v(" 3. 解释一下对 "),e("em",[v._v("Vue")]),v._v(" 生命周期的理解")]),v._v(" "),e("ul",[e("li",[v._v("什么是 "),e("em",[v._v("vue")]),v._v(" 生命周期")]),v._v(" "),e("li",[e("em",[v._v("vue")]),v._v(" 生命周期的作用是什么")]),v._v(" "),e("li",[e("em",[v._v("vue")]),v._v(" 生命周期有几个阶段")]),v._v(" "),e("li",[v._v("第一次页面加载会触发哪几个钩子")]),v._v(" "),e("li",[e("em",[v._v("DOM")]),v._v(" 渲染在哪个周期就已经完成")]),v._v(" "),e("li",[v._v("多组件（父子组件）中生命周期的调用顺序说一下")])]),v._v(" "),e("blockquote",[e("p",[v._v("参考答案：")]),v._v(" "),e("p",[v._v("什么是 "),e("em",[v._v("vue")]),v._v(" 生命周期")]),v._v(" "),e("p",[v._v("对于 "),e("em",[v._v("vue")]),v._v(" 来讲，生命周期就是一个 "),e("em",[v._v("vue")]),v._v(" 实例从创建到销毁的过程。")]),v._v(" "),e("p",[e("em",[v._v("vue")]),v._v(" 生命周期的作用是什么")]),v._v(" "),e("p",[v._v("在生命周期的过程中会运行着一些叫做生命周期的函数，给予了开发者在不同的生命周期阶段添加业务代码的能力。")]),v._v(" "),e("p",[v._v("其实和回调是一个概念，当系统执行到某处时，检查是否有 "),e("em",[v._v("hook")]),v._v("(钩子)，有的话就会执行回调。")]),v._v(" "),e("p",[v._v("通俗的说，"),e("em",[v._v("hook")]),v._v(" 就是在程序运行中，在某个特定的位置，框架的开发者设计好了一个钩子来告诉我们当前程序已经运行到特定的位置了，会触发一个回调函数，并提供给我们，让我们可以在生命周期的特定阶段进行相关业务代码的编写。")]),v._v(" "),e("p",[e("em",[v._v("vue")]),v._v(" 生命周期有几个阶段")]),v._v(" "),e("p",[v._v("它可以总共分为 "),e("em",[v._v("8")]),v._v(" 个阶段：创建前/后, 载入前/后,更新前/后,销毁前/销毁后。")]),v._v(" "),e("ul",[e("li",[e("p",[e("em",[v._v("beforeCreate")]),v._v("：是 "),e("em",[v._v("new Vue( )")]),v._v(" 之后触发的第一个钩子，在当前阶段 "),e("em",[v._v("data、methods、computed")]),v._v(" 以及 "),e("em",[v._v("watch")]),v._v(" 上的数据和方法都不能被访问。")])]),v._v(" "),e("li",[e("p",[e("em",[v._v("created")]),v._v("：在实例创建完成后发生，当前阶段已经完成了数据观测，也就是可以使用数据，更改数据，在这里更改数据不会触发 "),e("em",[v._v("updated")]),v._v(" 函数。可以做一些初始数据的获取，在当前阶段无法与 "),e("em",[v._v("DOM")]),v._v(" 进行交互，如果非要想，可以通过 "),e("em",[v._v("vm.$nextTick")]),v._v(" 来访问 "),e("em",[v._v("DOM")]),v._v(" 。")])]),v._v(" "),e("li",[e("p",[e("em",[v._v("beforeMount")]),v._v("：发生在挂载之前，在这之前 "),e("em",[v._v("template")]),v._v(" 模板已导入渲染函数编译。而当前阶段虚拟 "),e("em",[v._v("DOM")]),v._v(" 已经创建完成，即将开始渲染。在此时也可以对数据进行更改，不会触发 "),e("em",[v._v("updated")]),v._v("。")])]),v._v(" "),e("li",[e("p",[e("em",[v._v("mounted")]),v._v("：在挂载完成后发生，在当前阶段，真实的 "),e("em",[v._v("DOM")]),v._v(" 挂载完毕，数据完成双向绑定，可以访问到 "),e("em",[v._v("DOM")]),v._v(" 节点，使用 "),e("em",[v._v("$refs")]),v._v(" 属性对 "),e("em",[v._v("DOM")]),v._v(" 进行操作。")])]),v._v(" "),e("li",[e("p",[e("em",[v._v("beforeUpdate")]),v._v("：发生在更新之前，也就是响应式数据发生更新，虚拟 "),e("em",[v._v("DOM")]),v._v(" 重新渲染之前被触发，你可以在当前阶段进行更改数据，不会造成重渲染。")])]),v._v(" "),e("li",[e("p",[e("em",[v._v("updated")]),v._v("：发生在更新完成之后，当前阶段组件 "),e("em",[v._v("DOM")]),v._v(" 已完成更新。要注意的是避免在此期间更改数据，因为这可能会导致无限循环的更新。")])]),v._v(" "),e("li",[e("p",[e("em",[v._v("beforeDestroy")]),v._v("：发生在实例销毁之前，在当前阶段实例完全可以被使用，我们可以在这时进行善后收尾工作，比如清除计时器。")])]),v._v(" "),e("li",[e("p",[e("em",[v._v("destroyed")]),v._v("：发生在实例销毁之后，这个时候只剩下了 "),e("em",[v._v("DOM")]),v._v(" 空壳。组件已被拆解，数据绑定被卸除，监听被移出，子实例也统统被销毁。")])])]),v._v(" "),e("p",[v._v("第一次页面加载会触发哪几个钩子")]),v._v(" "),e("p",[v._v("会触发 "),e("em",[v._v("4")]),v._v(" 个钩子，分别是："),e("em",[v._v("beforeCreate、created、beforeMount、mounted")])]),v._v(" "),e("p",[e("em",[v._v("DOM")]),v._v(" 渲染在哪个周期就已经完成")]),v._v(" "),e("p",[e("em",[v._v("DOM")]),v._v(" 渲染是在 "),e("em",[v._v("mounted")]),v._v(" 阶段完成，此阶段真实的 "),e("em",[v._v("DOM")]),v._v(" 挂载完毕，数据完成双向绑定，可以访问到 "),e("em",[v._v("DOM")]),v._v(" 节点。")]),v._v(" "),e("p",[v._v("多组件（父子组件）中生命周期的调用顺序说一下")]),v._v(" "),e("p",[v._v("组件的调用顺序都是先父后子，渲染完成的顺序是先子后父。组件的销毁操作是先父后子，销毁完成的顺序是先子后父。")]),v._v(" "),e("ul",[e("li",[e("p",[v._v("加载渲染过程：父"),e("em",[v._v("beforeCreate")]),v._v("->父"),e("em",[v._v("created")]),v._v("->父"),e("em",[v._v("beforeMount")]),v._v("->子"),e("em",[v._v("beforeCreate")]),v._v("->子"),e("em",[v._v("created")]),v._v("->子"),e("em",[v._v("beforeMount")]),v._v("- >子"),e("em",[v._v("mounted")]),v._v("->父"),e("em",[v._v("mounted")])])]),v._v(" "),e("li",[e("p",[v._v("子组件更新过程：父"),e("em",[v._v("beforeUpdate")]),v._v("->子"),e("em",[v._v("beforeUpdate")]),v._v("->子"),e("em",[v._v("updated")]),v._v("->父"),e("em",[v._v("updated")])])]),v._v(" "),e("li",[e("p",[v._v("父组件更新过程：父 "),e("em",[v._v("beforeUpdate")]),v._v(" -> 父 "),e("em",[v._v("updated")])])]),v._v(" "),e("li",[e("p",[v._v("销毁过程：父"),e("em",[v._v("beforeDestroy")]),v._v("->子"),e("em",[v._v("beforeDestroy")]),v._v("->子"),e("em",[v._v("destroyed")]),v._v("->父"),e("em",[v._v("destroyed")])])])])]),v._v(" "),e("h2",{attrs:{id:"_4-vue-实现双向数据绑定原理是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-vue-实现双向数据绑定原理是什么"}},[v._v("#")]),v._v(" 4. "),e("em",[v._v("Vue")]),v._v(" 实现双向数据绑定原理是什么？")]),v._v(" "),e("blockquote",[e("p",[v._v("参考答案：")]),v._v(" "),e("p",[e("em",[v._v("Vue2.x")]),v._v(" 采用数据劫持结合发布订阅模式（"),e("em",[v._v("PubSub")]),v._v(" 模式）的方式，通过 "),e("em",[v._v("Object.defineProperty")]),v._v(" 来劫持各个属性的 "),e("em",[v._v("setter、getter")]),v._v("，在数据变动时发布消息给订阅者，触发相应的监听回调。")]),v._v(" "),e("p",[v._v("当把一个普通 "),e("em",[v._v("Javascript")]),v._v(" 对象传给 "),e("em",[v._v("Vue")]),v._v(" 实例来作为它的 "),e("em",[v._v("data")]),v._v(" 选项时，"),e("em",[v._v("Vue")]),v._v(" 将遍历它的属性，用 "),e("em",[v._v("Object.defineProperty")]),v._v(" 将它们转为 "),e("em",[v._v("getter/setter")]),v._v("。用户看不到 "),e("em",[v._v("getter/setter")]),v._v("，但是在内部它们让 "),e("em",[v._v("Vue")]),v._v(" 追踪依赖，在属性被访问和修改时通知变化。")]),v._v(" "),e("p",[e("em",[v._v("Vue")]),v._v(" 的数据双向绑定整合了 "),e("em",[v._v("Observer")]),v._v("，"),e("em",[v._v("Compile")]),v._v(" 和 "),e("em",[v._v("Watcher")]),v._v(" 三者，通过 "),e("em",[v._v("Observer")]),v._v(" 来监听自己的 "),e("em",[v._v("model")]),v._v(" 的数据变化，通过 "),e("em",[v._v("Compile")]),v._v(" 来解析编译模板指令，最终利用 "),e("em",[v._v("Watcher")]),v._v(" 搭起 "),e("em",[v._v("Observer")]),v._v(" 和 "),e("em",[v._v("Compile")]),v._v(" 之间的通信桥梁，达到数据变化->视图更新，视图交互变化（例如 input 操作）->数据 "),e("em",[v._v("model")]),v._v(" 变更的双向绑定效果。")]),v._v(" "),e("p",[e("em",[v._v("Vue3.x")]),v._v(" 放弃了 "),e("em",[v._v("Object.defineProperty")]),v._v(" ，使用 "),e("em",[v._v("ES6")]),v._v(" 原生的 "),e("em",[v._v("Proxy")]),v._v("，来解决以前使用 "),e("em",[v._v("Object.defineProperty")]),v._v(" 所存在的一些问题。")])]),v._v(" "),e("h2",{attrs:{id:"_5-说一下对-vue2-x-响应式原理的理解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-说一下对-vue2-x-响应式原理的理解"}},[v._v("#")]),v._v(" 5. 说一下对 "),e("em",[v._v("Vue2.x")]),v._v(" 响应式原理的理解")]),v._v(" "),e("blockquote",[e("p",[v._v("参考答案：")]),v._v(" "),e("p",[e("em",[v._v("Vue")]),v._v(" 在初始化数据时，会使用 "),e("em",[v._v("Object.defineProperty")]),v._v(" 重新定义 "),e("em",[v._v("data")]),v._v(" 中的所有属性，当页面使用对应属性时，首先会进行依赖收集(收集当前组件的 "),e("em",[v._v("watcher")]),v._v(")，如果属性发生变化会通知相关依赖进行更新操作(发布订阅)。")]),v._v(" "),e("p",[v._v("（可以参阅前面第 "),e("em",[v._v("4")]),v._v(" 题答案）")])]),v._v(" "),e("h2",{attrs:{id:"_6-说一下在-vue2-x-中如何检测数组的变化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-说一下在-vue2-x-中如何检测数组的变化"}},[v._v("#")]),v._v(" 6. 说一下在 "),e("em",[v._v("Vue2.x")]),v._v(" 中如何检测数组的变化？")]),v._v(" "),e("blockquote",[e("p",[v._v("参考答案：")]),v._v(" "),e("p",[e("em",[v._v("Vue2.x")]),v._v(" 中实现检测数组变化的方法，是将数组的常用方法进行了重写。"),e("em",[v._v("Vue")]),v._v(" 将 "),e("em",[v._v("data")]),v._v(" 中的数组进行了原型链重写，指向了自己定义的数组原型方法。这样当调用数组 "),e("em",[v._v("api")]),v._v(" 时，可以通知依赖更新。如果数组中包含着引用类型，会对数组中的引用类型再次递归遍历进行监控。这样就实现了监测数组变化。")]),v._v(" "),e("p",[v._v("流程:")]),v._v(" "),e("ol",[e("li",[v._v("初始化传入 data 数据执行 initData")]),v._v(" "),e("li",[v._v("将数据进行观测 new Observer")]),v._v(" "),e("li",[v._v("将数组原型方法指向重写的原型")]),v._v(" "),e("li",[v._v("深度观察数组中的引用类型")])]),v._v(" "),e("p",[v._v("有两种情况无法检测到数组的变化。")]),v._v(" "),e("ul",[e("li",[v._v("当利用索引直接设置一个数组项时，例如 "),e("em",[v._v("vm.items[indexOfItem] = newValue")])]),v._v(" "),e("li",[v._v("当修改数组的长度时，例如 "),e("em",[v._v("vm.items.length = newLength")])])]),v._v(" "),e("p",[v._v("不过这两种场景都有对应的解决方案。")]),v._v(" "),e("p",[v._v("利用索引设置数组项的替代方案")]),v._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[v._v("//使用该方法进行更新视图")]),v._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[v._v("// vm.$set，Vue.set的一个别名")]),v._v("\nvm"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[v._v("$set")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),v._v("vm"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),v._v("items"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v(" indexOfItem"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v(" newValue"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n")])])]),e("p",[v._v("修改数组的长度的替代方案")]),v._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[v._v("//使用该方法进行更新视图")]),v._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[v._v("// Array.prototype.splice")]),v._v("\nvm"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),v._v("items"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[v._v("splice")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),v._v("indexOfItem"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[v._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v(" newValue"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n")])])])]),v._v(" "),e("h2",{attrs:{id:"_7-vue3-x-响应式数据"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-vue3-x-响应式数据"}},[v._v("#")]),v._v(" 7. "),e("em",[v._v("Vue3.x")]),v._v(" 响应式数据")]),v._v(" "),e("ul",[e("li",[e("em",[v._v("Vue3.x")]),v._v(" 响应式数据原理是什么？")]),v._v(" "),e("li",[e("em",[v._v("Proxy")]),v._v(" 只会代理对象的第一层，那么 "),e("em",[v._v("Vue3")]),v._v(" 又是怎样处理这个问题的呢？")]),v._v(" "),e("li",[v._v("监测数组的时候可能触发多次 "),e("em",[v._v("get/set")]),v._v("，那么如何防止触发多次呢？")])]),v._v(" "),e("blockquote",[e("p",[v._v("参考答案：")]),v._v(" "),e("p",[e("em",[v._v("Vue3.x")]),v._v(" 响应式数据原理是什么？")]),v._v(" "),e("p",[v._v("在 "),e("em",[v._v("Vue 2")]),v._v(" 中，响应式原理就是使用的 "),e("em",[v._v("Object.defineProperty")]),v._v(" 来实现的。但是在 "),e("em",[v._v("Vue 3.0")]),v._v(" 中采用了 "),e("em",[v._v("Proxy")]),v._v("，抛弃了 "),e("em",[v._v("Object.defineProperty")]),v._v(" 方法。")]),v._v(" "),e("p",[v._v("究其原因，主要是以下几点：")]),v._v(" "),e("ul",[e("li",[e("em",[v._v("Object.defineProperty")]),v._v(" 无法监控到数组下标的变化，导致通过数组下标添加元素，不能实时响应")]),v._v(" "),e("li",[e("em",[v._v("Object.defineProperty")]),v._v(" 只能劫持对象的属性，从而需要对每个对象，每个属性进行遍历，如果，属性值是对象，还需要深度遍历。"),e("em",[v._v("Proxy")]),v._v(" 可以劫持整个对象，并返回一个新的对象。")]),v._v(" "),e("li",[e("em",[v._v("Proxy")]),v._v(" 不仅可以代理对象，还可以代理数组。还可以代理动态增加的属性。")]),v._v(" "),e("li",[e("em",[v._v("Proxy")]),v._v(" 有多达 "),e("em",[v._v("13")]),v._v(" 种拦截方法")]),v._v(" "),e("li",[e("em",[v._v("Proxy")]),v._v("作为新标准将受到浏览器厂商重点持续的性能优化")])]),v._v(" "),e("p",[e("em",[v._v("Proxy")]),v._v(" 只会代理对象的第一层，那么 "),e("em",[v._v("Vue3")]),v._v(" 又是怎样处理这个问题的呢？")]),v._v(" "),e("p",[v._v("判断当前 "),e("em",[v._v("Reflect.get")]),v._v(" 的返回值是否为 "),e("em",[v._v("Object")]),v._v("，如果是则再通过 "),e("em",[v._v("reactive")]),v._v(" 方法做代理， 这样就实现了深度观测。")]),v._v(" "),e("p",[v._v("监测数组的时候可能触发多次 "),e("em",[v._v("get/set")]),v._v("，那么如何防止触发多次呢？")]),v._v(" "),e("p",[v._v("我们可以判断 "),e("em",[v._v("key")]),v._v(" 是否为当前被代理对象 "),e("em",[v._v("target")]),v._v(" 自身属性，也可以判断旧值与新值是否相等，只有满足以上两个条件之一时，才有可能执行 "),e("em",[v._v("trigger")]),v._v("。")])]),v._v(" "),e("h2",{attrs:{id:"_8-v-model-双向绑定的原理是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-v-model-双向绑定的原理是什么"}},[v._v("#")]),v._v(" 8. "),e("em",[v._v("v-model")]),v._v(" 双向绑定的原理是什么？")]),v._v(" "),e("blockquote",[e("p",[v._v("参考答案：")]),v._v(" "),e("p",[e("em",[v._v("v-model")]),v._v(" 本质就是 "),e("em",[v._v(":value + input")]),v._v(" 方法的语法糖。可以通过 "),e("em",[v._v("model")]),v._v(" 属性的 "),e("em",[v._v("prop")]),v._v(" 和 "),e("em",[v._v("event")]),v._v(" 属性来进行自定义。原生的 "),e("em",[v._v("v-model")]),v._v("，会根据标签的不同生成不同的事件和属性。")]),v._v(" "),e("p",[v._v("例如：")]),v._v(" "),e("ul",[e("li",[e("em",[v._v("text")]),v._v(" 和 "),e("em",[v._v("textarea")]),v._v(" 元素使用 "),e("em",[v._v("value")]),v._v(" 属性和 "),e("em",[v._v("input")]),v._v(" 事件")]),v._v(" "),e("li",[e("em",[v._v("checkbox")]),v._v(" 和 "),e("em",[v._v("radio")]),v._v(" 使用 "),e("em",[v._v("checked")]),v._v(" 属性和 "),e("em",[v._v("change")]),v._v(" 事件")]),v._v(" "),e("li",[e("em",[v._v("select")]),v._v(" 字段将 "),e("em",[v._v("value")]),v._v(" 作为 "),e("em",[v._v("prop")]),v._v(" 并将 "),e("em",[v._v("change")]),v._v(" 作为事件")])]),v._v(" "),e("p",[v._v("以输入框为例，当用户在输入框输入内容时，会触发 "),e("em",[v._v("input")]),v._v(" 事件，从而更新 "),e("em",[v._v("value")]),v._v("。而 "),e("em",[v._v("value")]),v._v(" 的改变同样会更新视图，这就是 "),e("em",[v._v("vue")]),v._v(" 中的双向绑定。双向绑定的原理，其实现思路如下：")]),v._v(" "),e("p",[v._v("首先要对数据进行劫持监听，所以我们需要设置一个监听器 "),e("em",[v._v("Observer")]),v._v("，用来监听所有属性。如果属性发上变化了，就需要告诉订阅者 "),e("em",[v._v("Watcher")]),v._v(" 看是否需要更新。")]),v._v(" "),e("p",[v._v("因为订阅者是有很多个，所以我们需要有一个消息订阅器 "),e("em",[v._v("Dep")]),v._v(" 来专门收集这些订阅者，然后在监听器 "),e("em",[v._v("Observer")]),v._v(" 和订阅者 "),e("em",[v._v("Watcher")]),v._v(" 之间进行统一管理的。")]),v._v(" "),e("p",[v._v("接着，我们还需要有一个指令解析器 "),e("em",[v._v("Compile")]),v._v("，对每个节点元素进行扫描和解析，将相关指令对应初始化成一个订阅者 "),e("em",[v._v("Watcher")]),v._v("，并替换模板数据或者绑定相应的函数，此时当订阅者 "),e("em",[v._v("Watcher")]),v._v(" 接收到相应属性的变化，就会执行对应的更新函数，从而更新视图。")]),v._v(" "),e("p",[v._v("因此接下去我们执行以下 "),e("em",[v._v("3")]),v._v(" 个步骤，实现数据的双向绑定：")]),v._v(" "),e("ol",[e("li",[e("p",[v._v("实现一个监听器 "),e("em",[v._v("Observer")]),v._v("，用来劫持并监听所有属性，如果有变动的，就通知订阅者。")])]),v._v(" "),e("li",[e("p",[v._v("实现一个订阅者 "),e("em",[v._v("Watcher")]),v._v("，可以收到属性的变化通知并执行相应的函数，从而更新视图。")])]),v._v(" "),e("li",[e("p",[v._v("实现一个解析器 "),e("em",[v._v("Compile")]),v._v("，可以扫描和解析每个节点的相关指令，并根据初始化模板数据以及初始化相应的订阅器。")])])]),v._v(" "),e("p",[v._v("流程图如下：")]),v._v(" "),e("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/717034f25ee385b09e9dee53b2988cae.png",alt:"img"}})]),v._v(" "),e("h2",{attrs:{id:"_9-vue2-x-和-vuex3-x-渲染器的-diff-算法分别说一下"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-vue2-x-和-vuex3-x-渲染器的-diff-算法分别说一下"}},[v._v("#")]),v._v(" 9. "),e("em",[v._v("vue2.x")]),v._v(" 和 "),e("em",[v._v("vuex3.x")]),v._v(" 渲染器的 "),e("em",[v._v("diff")]),v._v(" 算法分别说一下？")]),v._v(" "),e("blockquote",[e("p",[v._v("直播讲解")])]),v._v(" "),e("blockquote",[e("p",[v._v("参考答案：")]),v._v(" "),e("p",[v._v("简单来说，"),e("em",[v._v("diff")]),v._v(" 算法有以下过程")]),v._v(" "),e("ul",[e("li",[v._v("同级比较，再比较子节点")]),v._v(" "),e("li",[v._v("先判断一方有子节点一方没有子节点的情况(如果新的 "),e("em",[v._v("children")]),v._v(" 没有子节点，将旧的子节点移除)")]),v._v(" "),e("li",[v._v("比较都有子节点的情况(核心 "),e("em",[v._v("diff")]),v._v(")")]),v._v(" "),e("li",[v._v("递归比较子节点")])]),v._v(" "),e("p",[v._v("正常 "),e("em",[v._v("Diff")]),v._v(" 两个树的时间复杂度是 "),e("em",[v._v("O(n^3)")]),v._v("，但实际情况下我们很少会进行跨层级的移动 "),e("em",[v._v("DOM")]),v._v("，所以 "),e("em",[v._v("Vue")]),v._v(" 将 "),e("em",[v._v("Diff")]),v._v(" 进行了优化，从"),e("em",[v._v("O(n^3) -> O(n)")]),v._v("，只有当新旧 "),e("em",[v._v("children")]),v._v(" 都为多个子节点时才需要用核心的 "),e("em",[v._v("Diff")]),v._v(" 算法进行同层级比较。")]),v._v(" "),e("p",[e("em",[v._v("Vue2")]),v._v(" 的核心 "),e("em",[v._v("Diff")]),v._v(" 算法采用了双端比较的算法，同时从新旧 "),e("em",[v._v("children")]),v._v(" 的两端开始进行比较，借助 "),e("em",[v._v("key")]),v._v(" 值找到可复用的节点，再进行相关操作。相比 "),e("em",[v._v("React")]),v._v(" 的 "),e("em",[v._v("Diff")]),v._v(" 算法，同样情况下可以减少移动节点次数，减少不必要的性能损耗，更加的优雅。")]),v._v(" "),e("p",[e("em",[v._v("Vue3.x")]),v._v(" 借鉴了 "),e("em",[v._v("ivi")]),v._v(" 算法和 "),e("em",[v._v("inferno")]),v._v(" 算法")]),v._v(" "),e("p",[v._v("在创建 "),e("em",[v._v("VNode")]),v._v(" 时就确定其类型，以及在 "),e("em",[v._v("mount/patch")]),v._v(" 的过程中采用位运算来判断一个 "),e("em",[v._v("VNode")]),v._v(" 的类型，在这个基础之上再配合核心的 "),e("em",[v._v("Diff")]),v._v(" 算法，使得性能上较 "),e("em",[v._v("Vue2.x")]),v._v(" 有了提升。该算法中还运用了动态规划的思想求解最长递归子序列。")])]),v._v(" "),e("h2",{attrs:{id:"_10-vue-组件的参数传递"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_10-vue-组件的参数传递"}},[v._v("#")]),v._v(" 10. "),e("em",[v._v("vue")]),v._v(" 组件的参数传递")]),v._v(" "),e("ul",[e("li",[v._v("解释一下父组件与子组件传值实现过程")]),v._v(" "),e("li",[v._v("非父子组件的数据传递，兄弟组件传值是如何实现的")])]),v._v(" "),e("blockquote",[e("p",[v._v("参考答案：")]),v._v(" "),e("p",[v._v("解释一下父组件与子组件传值实现过程")]),v._v(" "),e("ul",[e("li",[e("p",[v._v("父组件传给子组件：子组件通过 "),e("em",[v._v("props")]),v._v(" 方法接受数据")])]),v._v(" "),e("li",[e("p",[v._v("子组件传给父组件：使用自定义事件，自组件通过 "),e("em",[v._v("$emit")]),v._v(" 方法触发父组件的方法来传递参数")])])]),v._v(" "),e("p",[v._v("非父子组件的数据传递，兄弟组件传值是如何实现的")]),v._v(" "),e("p",[e("em",[v._v("eventBus")]),v._v("，就是创建一个事件中心，相当于中转站，可以用它来传递事件和接收事件。项目比较小时，用这个比较合适。")]),v._v(" "),e("p",[v._v("此外，总结 "),e("em",[v._v("vue")]),v._v(" 中的组件通信方式，常见使用场景可以分为三类：")]),v._v(" "),e("ul",[e("li",[v._v("父子通信：\n"),e("ul",[e("li",[v._v("父向子传递数据是通过 "),e("em",[v._v("props")]),v._v(" ，子向父是通过 "),e("em",[v._v("$emit / $on")])]),v._v(" "),e("li",[e("em",[v._v("$emit / $bus")])]),v._v(" "),e("li",[e("em",[v._v("vuex")])]),v._v(" "),e("li",[v._v("通过父链 / 子链也可以通信（ "),e("em",[v._v("$parent / $children")]),v._v(" ）")]),v._v(" "),e("li",[e("em",[v._v("ref")]),v._v(" 也可以访问组件实例")]),v._v(" "),e("li",[e("em",[v._v("v-model")])]),v._v(" "),e("li",[v._v("."),e("em",[v._v("sync")]),v._v(" 修饰符")])])]),v._v(" "),e("li",[v._v("兄弟通信：\n"),e("ul",[e("li",[e("em",[v._v("$emit / $bus")])]),v._v(" "),e("li",[e("em",[v._v("vuex")])])])]),v._v(" "),e("li",[v._v("跨级通信：\n"),e("ul",[e("li",[e("em",[v._v("$emit / $bus")])]),v._v(" "),e("li",[e("em",[v._v("vuex")])]),v._v(" "),e("li",[e("em",[v._v("provide / inject API")])]),v._v(" "),e("li",[e("em",[v._v("$attrs/$listeners")])])])])])]),v._v(" "),e("h2",{attrs:{id:"_11-vue-的路由实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_11-vue-的路由实现"}},[v._v("#")]),v._v(" 11. "),e("em",[v._v("Vue")]),v._v(" 的路由实现")]),v._v(" "),e("ul",[e("li",[v._v("解释 "),e("em",[v._v("hash")]),v._v(" 模式和 "),e("em",[v._v("history")]),v._v(" 模式的实现原理")]),v._v(" "),e("li",[v._v("说一下 "),e("em",[v._v("$router")]),v._v(" 与 "),e("em",[v._v("$route")]),v._v(" 的区别")]),v._v(" "),e("li",[e("em",[v._v("vueRouter")]),v._v(" 有哪几种导航守卫？")]),v._v(" "),e("li",[v._v("解释一下 "),e("em",[v._v("vueRouter")]),v._v(" 的完整的导航解析流程是什么")])]),v._v(" "),e("blockquote",[e("p",[v._v("参考答案：")]),v._v(" "),e("p",[v._v("解释 "),e("em",[v._v("hash")]),v._v(" 模式和 "),e("em",[v._v("history")]),v._v(" 模式的实现原理")]),v._v(" "),e("p",[e("code",[v._v("#")]),v._v(" 后面 "),e("em",[v._v("hash")]),v._v(" 值的变化，不会导致浏览器向服务器发出请求，浏览器不发出请求，就不会刷新页面；通过监听 "),e("em",[v._v("hashchange")]),v._v(" 事件可以知道 "),e("em",[v._v("hash")]),v._v(" 发生了哪些变化，然后根据 "),e("em",[v._v("hash")]),v._v(" 变化来实现更新页面部分内容的操作。")]),v._v(" "),e("p",[e("em",[v._v("history")]),v._v(" 模式的实现，主要是 "),e("em",[v._v("HTML5")]),v._v(" 标准发布的两个 "),e("em",[v._v("API")]),v._v("，"),e("em",[v._v("pushState")]),v._v(" 和 "),e("em",[v._v("replaceState")]),v._v("，这两个 "),e("em",[v._v("API")]),v._v(" 可以在改变 "),e("em",[v._v("URL")]),v._v("，但是不会发送请求。这样就可以监听 "),e("em",[v._v("url")]),v._v(" 变化来实现更新页面部分内容的操作。")]),v._v(" "),e("p",[v._v("两种模式的区别：")]),v._v(" "),e("ul",[e("li",[e("p",[v._v("首先是在 "),e("em",[v._v("URL")]),v._v(" 的展示上，"),e("em",[v._v("hash")]),v._v(" 模式有“#”，"),e("em",[v._v("history")]),v._v(" 模式没有")])]),v._v(" "),e("li",[e("p",[v._v("刷新页面时，"),e("em",[v._v("hash")]),v._v(" 模式可以正常加载到 "),e("em",[v._v("hash")]),v._v(" 值对应的页面，而 "),e("em",[v._v("history")]),v._v(" 没有处理的话，会返回 "),e("em",[v._v("404")]),v._v("，一般需要后端将所有页面都配置重定向到首页路由")])]),v._v(" "),e("li",[e("p",[v._v("在兼容性上，"),e("em",[v._v("hash")]),v._v(" 可以支持低版本浏览器和 "),e("em",[v._v("IE")])])])]),v._v(" "),e("p",[v._v("说一下 "),e("em",[v._v("$router")]),v._v(" 与 "),e("em",[v._v("$route")]),v._v(" 的区别")]),v._v(" "),e("p",[e("em",[v._v("$route")]),v._v(" 对象表示当前的路由信息，包含了当前 "),e("em",[v._v("URL")]),v._v(" 解析得到的信息。包含当前的路径，参数，"),e("em",[v._v("query")]),v._v(" 对象等。")]),v._v(" "),e("ul",[e("li",[e("em",[v._v("$route.path")]),v._v('：字符串，对应当前路由的路径，总是解析为绝对路径，如 "/foo/bar"。')]),v._v(" "),e("li",[e("em",[v._v("$route.params")]),v._v("： 一个 key/value 对象，包含了 动态片段 和 全匹配片段，如果没有路由参数，就是一个空对象。")]),v._v(" "),e("li",[e("em",[v._v("$route.query")]),v._v("：一个 key/value 对象，表示 URL 查询参数。例如对于路径 "),e("em",[v._v("/foo?user=1")]),v._v("，则有 "),e("em",[v._v("$route.query.user == 1")]),v._v("，如果没有查询参数，则是个空对象。")]),v._v(" "),e("li",[e("em",[v._v("$route.hash")]),v._v("：当前路由的 hash 值 (不带 #) ，如果没有 "),e("em",[v._v("hash")]),v._v(" 值，则为空字符串。")]),v._v(" "),e("li",[e("em",[v._v("$route.fullPath")]),v._v("：完成解析后的 "),e("em",[v._v("URL")]),v._v("，包含查询参数和 "),e("em",[v._v("hash")]),v._v(" 的完整路径。")]),v._v(" "),e("li",[e("em",[v._v("$route.matched")]),v._v("：数组，包含当前匹配的路径中所包含的所有片段所对应的配置参数对象。")]),v._v(" "),e("li",[e("em",[v._v("$route.name")]),v._v("：当前路径名字")]),v._v(" "),e("li",[e("em",[v._v("$route.meta")]),v._v("：路由元信息")])]),v._v(" "),e("p",[e("em",[v._v("$route")]),v._v(" 对象出现在多个地方:")]),v._v(" "),e("ul",[e("li",[v._v("组件内的 "),e("em",[v._v("this.$route")]),v._v(" 和 "),e("em",[v._v("route watcher")]),v._v(" 回调（监测变化处理）")]),v._v(" "),e("li",[e("em",[v._v("router.match(location)")]),v._v(" 的返回值")]),v._v(" "),e("li",[e("em",[v._v("scrollBehavior")]),v._v(" 方法的参数")]),v._v(" "),e("li",[v._v("导航钩子的参数，例如 "),e("em",[v._v("router.beforeEach")]),v._v(" 导航守卫的钩子函数中，"),e("em",[v._v("to")]),v._v(" 和 "),e("em",[v._v("from")]),v._v(" 都是这个路由信息对象。")])]),v._v(" "),e("p",[e("em",[v._v("$router")]),v._v(" 对象是全局路由的实例，是 "),e("em",[v._v("router")]),v._v(" 构造方法的实例。")]),v._v(" "),e("p",[e("em",[v._v("$router")]),v._v(" 对象常用的方法有：")]),v._v(" "),e("ul",[e("li",[e("em",[v._v("push")]),v._v("：向 "),e("em",[v._v("history")]),v._v(" 栈添加一个新的记录")]),v._v(" "),e("li",[e("em",[v._v("go")]),v._v("：页面路由跳转前进或者后退")]),v._v(" "),e("li",[e("em",[v._v("replace")]),v._v("：替换当前的页面，不会向 "),e("em",[v._v("history")]),v._v(" 栈添加一个新的记录")])]),v._v(" "),e("p",[e("em",[v._v("vueRouter")]),v._v(" 有哪几种导航守卫？")]),v._v(" "),e("ul",[e("li",[e("p",[v._v("全局前置/钩子："),e("em",[v._v("beforeEach、beforeR-esolve、afterEach")])])]),v._v(" "),e("li",[e("p",[v._v("路由独享的守卫："),e("em",[v._v("beforeEnter")])])]),v._v(" "),e("li",[e("p",[v._v("组件内的守卫："),e("em",[v._v("beforeRouteEnter、beforeRouteUpdate、beforeRouteLeave")])])])]),v._v(" "),e("p",[v._v("解释一下 "),e("em",[v._v("vueRouter")]),v._v(" 的完整的导航解析流程是什么")]),v._v(" "),e("p",[v._v("一次完整的导航解析流程如下：")]),v._v(" "),e("ol",[e("li",[v._v("导航被触发。")]),v._v(" "),e("li",[v._v("在失活的组件里调用离开守卫。")]),v._v(" "),e("li",[v._v("调用全局的 "),e("em",[v._v("beforeEach")]),v._v(" 守卫。")]),v._v(" "),e("li",[v._v("在重用的组件里调用 "),e("em",[v._v("beforeRouteUpdate")]),v._v(" 守卫（"),e("em",[v._v("2.2+")]),v._v("）。")]),v._v(" "),e("li",[v._v("在路由配置里调用 "),e("em",[v._v("beforeEnter")]),v._v("。")]),v._v(" "),e("li",[v._v("解析异步路由组件。")]),v._v(" "),e("li",[v._v("在被激活的组件里调用 "),e("em",[v._v("beforeRouteEnter")]),v._v("。")]),v._v(" "),e("li",[v._v("调用全局的 "),e("em",[v._v("beforeResolve")]),v._v(" 守卫（"),e("em",[v._v("2.5+")]),v._v("）。")]),v._v(" "),e("li",[v._v("导航被确认。")]),v._v(" "),e("li",[v._v("调用全局的 "),e("em",[v._v("afterEach")]),v._v(" 钩子。")]),v._v(" "),e("li",[v._v("触发 "),e("em",[v._v("DOM")]),v._v(" 更新。")]),v._v(" "),e("li",[v._v("用创建好的实例调用 "),e("em",[v._v("beforeRouteEnter")]),v._v(" 守卫中传给 "),e("em",[v._v("next")]),v._v(" 的回调函数。")])])]),v._v(" "),e("h2",{attrs:{id:"_12-vuex-是什么-怎么使用它-什么场景下我们会使用到-vuex"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_12-vuex-是什么-怎么使用它-什么场景下我们会使用到-vuex"}},[v._v("#")]),v._v(" 12. "),e("em",[v._v("vuex")]),v._v(" 是什么？怎么使用它？什么场景下我们会使用到 "),e("em",[v._v("vuex")])]),v._v(" "),e("blockquote",[e("p",[v._v("参考答案：")]),v._v(" "),e("p",[e("em",[v._v("vuex")]),v._v(" 是什么")]),v._v(" "),e("p",[e("em",[v._v("vuex")]),v._v(" 是一个专为 "),e("em",[v._v("Vue")]),v._v(" 应用程序开发的状态管理器，采用集中式存储管理应用的所有组件的状态。每一个 "),e("em",[v._v("vuex")]),v._v(" 应用的核心就是 "),e("em",[v._v("store")]),v._v("（仓库）。“"),e("em",[v._v("store")]),v._v("” 基本上就是一个容器，它包含着应用中大部分的状态 ("),e("em",[v._v("state")]),v._v(")。")]),v._v(" "),e("p",[v._v("为什么需要 "),e("em",[v._v("vuex")])]),v._v(" "),e("p",[v._v("由于组件只维护自身的状态("),e("em",[v._v("data")]),v._v(")，组件创建时或者路由切换时，组件会被初始化，从而导致 "),e("em",[v._v("data")]),v._v(" 也随之销毁。")]),v._v(" "),e("p",[v._v("使用方法")]),v._v(" "),e("p",[v._v("在 "),e("em",[v._v("main.js")]),v._v(" 引入 "),e("em",[v._v("store")]),v._v("，注入。只用来读取的状态集中放在 "),e("em",[v._v("store")]),v._v(" 中， 改变状态的方式是提交 "),e("em",[v._v("mutations")]),v._v("，这是个同步的事物，异步逻辑应该封装在 "),e("em",[v._v("action")]),v._v(" 中。")]),v._v(" "),e("p",[v._v("什么场景下会使用到 "),e("em",[v._v("vuex")])]),v._v(" "),e("p",[v._v("如果是 "),e("em",[v._v("vue")]),v._v(" 的小型应用，那么没有必要使用 "),e("em",[v._v("vuex")]),v._v("，这个时候使用 "),e("em",[v._v("vuex")]),v._v(" 反而会带来负担。组件之间的状态传递使用 "),e("em",[v._v("props")]),v._v("、自定义事件来传递即可。")]),v._v(" "),e("p",[v._v("但是如果涉及到 "),e("em",[v._v("vue")]),v._v(" 的大型应用，那么就需要类似于 "),e("em",[v._v("vuex")]),v._v(" 这样的集中管理状态的状态机来管理所有组件的状态。例如登录状态、加入购物车、音乐播放等，总之只要是开发 "),e("em",[v._v("vue")]),v._v(" 的大型应用，都推荐使用 "),e("em",[v._v("vuex")]),v._v(" 来管理所有组件状态。")])]),v._v(" "),e("h2",{attrs:{id:"_13-说一下-v-for-与-v-show-的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_13-说一下-v-for-与-v-show-的区别"}},[v._v("#")]),v._v(" 13. 说一下 "),e("em",[v._v("v-for")]),v._v(" 与 "),e("em",[v._v("v-show")]),v._v(" 的区别")]),v._v(" "),e("blockquote",[e("p",[v._v("参考答案：")]),v._v(" "),e("ul",[e("li",[e("p",[v._v("共同点：都是动态显示 "),e("em",[v._v("DOM")]),v._v(" 元素")])]),v._v(" "),e("li",[e("p",[v._v("区别点:")]),v._v(" "),e("ul",[e("li",[e("p",[v._v("手段")]),v._v(" "),e("p",[e("em",[v._v("v-if")]),v._v(" 是动态的向 "),e("em",[v._v("DOM")]),v._v(" 树内添加或者删除 "),e("em",[v._v("DOM")]),v._v(" 元素")]),v._v(" "),e("p",[e("em",[v._v("v-show")]),v._v(" 是通过设置 "),e("em",[v._v("DOM")]),v._v(" 元素的 "),e("em",[v._v("display")]),v._v(" 样式属性控制显隐")])]),v._v(" "),e("li",[e("p",[v._v("编译过程")]),v._v(" "),e("p",[e("em",[v._v("v-if")]),v._v(" 切换有一个局部编译/卸载的过程，切换过程中合适地销毁和重建内部的事件监听和子组件")]),v._v(" "),e("p",[e("em",[v._v("v-show")]),v._v(" 只是简单的基于 "),e("em",[v._v("css")]),v._v(" 切换")])]),v._v(" "),e("li",[e("p",[v._v("编译条件")]),v._v(" "),e("p",[e("em",[v._v("v-if")]),v._v(" 是惰性的，如果初始条件为假，则什么也不做。只有在条件第一次变为真时才开始局部编译")]),v._v(" "),e("p",[e("em",[v._v("v-show")]),v._v(" 是在任何条件下(首次条件是否为真)都被编译，然后被缓存，而且 "),e("em",[v._v("DOM")]),v._v(" 元素保留")])]),v._v(" "),e("li",[e("p",[v._v("性能消耗")]),v._v(" "),e("p",[e("em",[v._v("v-if")]),v._v(" 有更高的切换消耗")]),v._v(" "),e("p",[e("em",[v._v("v-show")]),v._v(" 有更高的初始渲染消耗")])]),v._v(" "),e("li",[e("p",[v._v("使用场景")]),v._v(" "),e("p",[e("em",[v._v("v-if")]),v._v(" 适合运营条件不大可能改变")]),v._v(" "),e("p",[e("em",[v._v("v-show")]),v._v(" 适合频繁切换")])])])])])]),v._v(" "),e("h2",{attrs:{id:"_14-如何让-css-值在当前的组件中起作用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_14-如何让-css-值在当前的组件中起作用"}},[v._v("#")]),v._v(" 14. 如何让 "),e("em",[v._v("CSS")]),v._v(" 值在当前的组件中起作用")]),v._v(" "),e("blockquote",[e("p",[v._v("参考答案：")]),v._v(" "),e("p",[v._v("在 "),e("em",[v._v("vue")]),v._v(" 文件中的 "),e("em",[v._v("style")]),v._v(" 标签上，有一个特殊的属性："),e("em",[v._v("scoped")]),v._v("。当一个 style 标签拥有 "),e("em",[v._v("scoped")]),v._v(" 属性时，它的 "),e("em",[v._v("CSS")]),v._v(" 样式就只能作用于当前的组件，也就是说，该样式只能适用于当前组件元素。通过该属性，可以使得组件之间的样式不互相污染。如果一个项目中的所有 "),e("em",[v._v("style")]),v._v(" 标签全部加上了 "),e("em",[v._v("scoped")]),v._v("，相当于实现了样式的模块化。")]),v._v(" "),e("p",[e("em",[v._v("scoped")]),v._v(" 的实现原理")]),v._v(" "),e("p",[e("em",[v._v("vue")]),v._v(" 中的 "),e("em",[v._v("scoped")]),v._v(" 属性的效果主要通过 "),e("em",[v._v("PostCSS")]),v._v(" 转译实现的。"),e("em",[v._v("PostCSS")]),v._v(" 给一个组件中的所有 "),e("em",[v._v("DOM")]),v._v(" 添加了一个独一无二的动态属性，然后，给 "),e("em",[v._v("CSS")]),v._v(" 选择器额外添加一个对应的属性选择器来选择该组件中 "),e("em",[v._v("DOM")]),v._v("，这种做法使得样式只作用于含有该属性的 "),e("em",[v._v("DOM")]),v._v("，即组件内部 "),e("em",[v._v("DOM")]),v._v("。")]),v._v(" "),e("p",[v._v("例如：")]),v._v(" "),e("p",[v._v("转译前")]),v._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("<")]),v._v("template"),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v(">")]),v._v("\n  "),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("<")]),v._v("div "),e("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("class")]),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[v._v('"example"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v(">")]),v._v("hi"),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("/")]),v._v("div"),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v(">")]),v._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("/")]),v._v("template"),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v(">")]),v._v("\n\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("<")]),v._v("style scoped"),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v(">")]),v._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),v._v("example "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n  "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[v._v("color")]),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v(":")]),v._v(" red"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),v._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("/")]),v._v("style"),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v(">")]),v._v("\n")])])]),e("p",[v._v("转译后：")]),v._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("<")]),v._v("template"),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v(">")]),v._v("\n  "),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("<")]),v._v("div "),e("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("class")]),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[v._v('"example"')]),v._v(" data"),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("-")]),v._v("v"),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("-")]),v._v("5558831a"),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v(">")]),v._v("hi"),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("/")]),v._v("div"),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v(">")]),v._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("/")]),v._v("template"),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v(">")]),v._v("\n\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("<")]),v._v("style"),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v(">")]),v._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),v._v("example"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("[")]),v._v("data"),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("-")]),v._v("v"),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("-")]),v._v("5558831a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("]")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n  "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[v._v("color")]),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v(":")]),v._v(" red"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),v._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("/")]),v._v("style"),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v(">")]),v._v("\n")])])])]),v._v(" "),e("h2",{attrs:{id:"_15-keep-alive-相关"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_15-keep-alive-相关"}},[v._v("#")]),v._v(" 15. "),e("em",[v._v("keep-alive")]),v._v(" 相关")]),v._v(" "),e("ul",[e("li",[v._v("keep-alive 的实现原理是什么")]),v._v(" "),e("li",[v._v("与 keep-alive 相关的生命周期函数是什么，什么场景下会进行使用")]),v._v(" "),e("li",[v._v("keep-alive 的常用属性有哪些")])]),v._v(" "),e("blockquote",[e("p",[v._v("参考答案：")]),v._v(" "),e("p",[v._v("keep-alive 组件是 vue 的内置组件，用于缓存内部组件实例。这样做的目的在于，keep-alive 内部的组件切回时，不用重新创建组件实例，而直接使用缓存中的实例，一方面能够避免创建组件带来的开销，另一方面可以保留组件的状态。")]),v._v(" "),e("p",[v._v("keep-alive 具有 include 和 exclude 属性，通过它们可以控制哪些组件进入缓存。另外它还提供了 max 属性，通过它可以设置最大缓存数，当缓存的实例超过该数时，vue 会移除最久没有使用的组件缓存。")]),v._v(" "),e("p",[v._v("受 keep-alive 的影响，其内部所有嵌套的组件都具有两个生命周期钩子函数，分别是 activated 和 deactivated，它们分别在组件激活和失活时触发。第一次 activated 触发是在 mounted 之后")]),v._v(" "),e("p",[v._v("在具体的实现上，keep-alive 在内部维护了一个 key 数组和一个缓存对象")]),v._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[v._v("// keep-alive 内部的声明周期函数")]),v._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[v._v("created")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),v._v("cache "),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" Object"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[v._v("create")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),v._v("keys "),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("]")]),v._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),v._v("\n")])])]),e("p",[v._v("key 数组记录目前缓存的组件 key 值，如果组件没有指定 key 值，则会为其自动生成一个唯一的 key 值")]),v._v(" "),e("p",[v._v("cache 对象以 key 值为键，vnode 为值，用于缓存组件对应的虚拟 DOM")]),v._v(" "),e("p",[v._v("在 keep-alive 的渲染函数中，其基本逻辑是判断当前渲染的 vnode 是否有对应的缓存，如果有，从缓存中读取到对应的组件实例；如果没有则将其缓存。")]),v._v(" "),e("p",[v._v("当缓存数量超过 max 数值时，keep-alive 会移除掉 key 数组的第一个元素。")])]),v._v(" "),e("h2",{attrs:{id:"_16-vue-中如何进行组件的使用-vue-如何实现全局组件的注册"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_16-vue-中如何进行组件的使用-vue-如何实现全局组件的注册"}},[v._v("#")]),v._v(" 16. "),e("em",[v._v("Vue")]),v._v(" 中如何进行组件的使用？"),e("em",[v._v("Vue")]),v._v(" 如何实现全局组件的注册？")]),v._v(" "),e("blockquote",[e("p",[v._v("参考答案：")]),v._v(" "),e("p",[v._v("要使用组件，首先需要使用 "),e("em",[v._v("import")]),v._v(" 来引入组件，然后在 "),e("em",[v._v("components")]),v._v(" 属性中注册组件，之后就可以在模板中使用组件了。")]),v._v(" "),e("p",[v._v("可以使用 "),e("em",[v._v("Vue.component")]),v._v(" 方法来实现全局组件的注册。")])]),v._v(" "),e("h2",{attrs:{id:"_17-vue-cli-工程相关"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_17-vue-cli-工程相关"}},[v._v("#")]),v._v(" 17. "),e("em",[v._v("vue-cli")]),v._v(" 工程相关")]),v._v(" "),e("ul",[e("li",[v._v("构建 "),e("em",[v._v("vue-cli")]),v._v(" 工程都用到了哪些技术？他们的作用分别是什么？")]),v._v(" "),e("li",[e("em",[v._v("vue-cli")]),v._v(" 工程常用的 "),e("em",[v._v("npm")]),v._v(" 命令有哪些？")])]),v._v(" "),e("blockquote",[e("p",[v._v("参考答案：")]),v._v(" "),e("p",[v._v("构建 "),e("em",[v._v("vue-cli")]),v._v(" 工程都用到了哪些技术？他们的作用分别是什么？")]),v._v(" "),e("ol",[e("li",[v._v("vue.js：vue-cli 工程的核心，主要特点是双向数据绑定和组件系统。")]),v._v(" "),e("li",[v._v("vue-router：vue 官方推荐使用的路由框架。")]),v._v(" "),e("li",[v._v("vuex：专为 Vue.js 应用项目开发的状态管理器，主要用于维护 vue 组件间共用的一些 变量 和 方法。")]),v._v(" "),e("li",[v._v("axios（或者 fetch、ajax）：用于发起 GET 、或 POST 等 http 请求，基于 Promise 设计。")]),v._v(" "),e("li",[v._v("vux 等：一个专为 vue 设计的移动端 UI 组件库。")]),v._v(" "),e("li",[v._v("webpack：模块加载和 vue-cli 工程打包器。")]),v._v(" "),e("li",[v._v("eslint：代码规范工具")])]),v._v(" "),e("p",[e("em",[v._v("vue-cli")]),v._v(" 工程常用的 "),e("em",[v._v("npm")]),v._v(" 命令有哪些？")]),v._v(" "),e("p",[v._v("下载 node_modules 资源包的命令：npm install")]),v._v(" "),e("p",[v._v("启动 vue-cli 开发环境的 npm 命令：npm run dev")]),v._v(" "),e("p",[v._v("vue-cli 生成 生产环境部署资源 的 npm 命令：npm run build")]),v._v(" "),e("p",[v._v("用于查看 vue-cli 生产环境部署资源文件大小的 npm 命令：npm run build --report")])]),v._v(" "),e("h2",{attrs:{id:"_18-nexttick-的作用是什么-他的实现原理是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_18-nexttick-的作用是什么-他的实现原理是什么"}},[v._v("#")]),v._v(" 18. "),e("em",[v._v("nextTick")]),v._v(" 的作用是什么？他的实现原理是什么？")]),v._v(" "),e("blockquote",[e("p",[v._v("参考答案：")]),v._v(" "),e("p",[v._v("作用："),e("em",[v._v("vue")]),v._v(" 更新 "),e("em",[v._v("DOM")]),v._v(" 是异步更新的，数据变化，"),e("em",[v._v("DOM")]),v._v(" 的更新不会马上完成，"),e("em",[v._v("nextTick")]),v._v(" 的回调是在下次 "),e("em",[v._v("DOM")]),v._v(" 更新循环结束之后执行的延迟回调。")]),v._v(" "),e("p",[v._v("实现原理："),e("em",[v._v("nextTick")]),v._v(" 主要使用了宏任务和微任务。根据执行环境分别尝试采用")]),v._v(" "),e("ul",[e("li",[e("em",[v._v("Promise")]),v._v("：可以将函数延迟到当前函数调用栈最末端")]),v._v(" "),e("li",[e("em",[v._v("MutationObserver")]),v._v(" ：是 "),e("em",[v._v("H5")]),v._v(" 新加的一个功能，其功能是监听 "),e("em",[v._v("DOM")]),v._v(" 节点的变动，在所有 "),e("em",[v._v("DOM")]),v._v(" 变动完成后，执行回调函数")]),v._v(" "),e("li",[e("em",[v._v("setImmediate")]),v._v("：用于中断长时间运行的操作，并在浏览器完成其他操作（如事件和显示更新）后立即运行回调函数")]),v._v(" "),e("li",[v._v("如果以上都不行则采用 "),e("em",[v._v("setTimeout")]),v._v(" 把函数延迟到 DOM 更新之后再使用")])]),v._v(" "),e("p",[v._v("原因是宏任务消耗大于微任务，优先使用微任务，最后使用消耗最大的宏任务。")])]),v._v(" "),e("h2",{attrs:{id:"_19-说一下-vue-ssr-的实现原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_19-说一下-vue-ssr-的实现原理"}},[v._v("#")]),v._v(" 19. 说一下 "),e("em",[v._v("Vue SSR")]),v._v(" 的实现原理")]),v._v(" "),e("blockquote",[e("p",[v._v("参考答案：")]),v._v(" "),e("ul",[e("li",[e("em",[v._v("app.js")]),v._v(" 作为客户端与服务端的公用入口，导出 "),e("em",[v._v("Vue")]),v._v(" 根实例，供客户端 "),e("em",[v._v("entry")]),v._v(" 与服务端 "),e("em",[v._v("entry")]),v._v(" 使用。客户端 "),e("em",[v._v("entry")]),v._v(" 主要作用挂载到 "),e("em",[v._v("DOM")]),v._v(" 上，服务端 "),e("em",[v._v("entry")]),v._v(" 除了创建和返回实例，还需要进行路由匹配与数据预获取。")]),v._v(" "),e("li",[e("em",[v._v("webpack")]),v._v(" 为客服端打包一个 "),e("em",[v._v("ClientBundle")]),v._v("，为服务端打包一个 "),e("em",[v._v("ServerBundle")]),v._v("。")]),v._v(" "),e("li",[v._v("服务器接收请求时，会根据 "),e("em",[v._v("url")]),v._v("，加载相应组件，获取和解析异步数据，创建一个读取 "),e("em",[v._v("Server Bundle")]),v._v(" 的 "),e("em",[v._v("BundleRenderer")]),v._v("，然后生成 "),e("em",[v._v("html")]),v._v(" 发送给客户端。")]),v._v(" "),e("li",[v._v("客户端混合，客户端收到从服务端传来的 "),e("em",[v._v("DOM")]),v._v(" 与自己的生成的 "),e("em",[v._v("DOM")]),v._v(" 进行对比，把不相同的 "),e("em",[v._v("DOM")]),v._v(" 激活，使其可以能够响应后续变化，这个过程称为客户端激活（也就是转换为单页应用）。为确保混合成功，客户 端与服务器端需要共享同一套数据。在服务端，可以在渲染之前获取数据，填充到 "),e("em",[v._v("store")]),v._v(" 里，这样，在客户端挂载到 "),e("em",[v._v("DOM")]),v._v(" 之前，可以直接从 "),e("em",[v._v("store")]),v._v(" 里取数据。首屏的动态数据通过 *window.**INITIAL*STATE**_ 发送到客户端")]),v._v(" "),e("li",[e("em",[v._v("VueSSR")]),v._v(" 的原理，主要就是通过 "),e("em",[v._v("vue-server-renderer")]),v._v(" 把 "),e("em",[v._v("Vue")]),v._v(" 的组件输出成一个完整 "),e("em",[v._v("HTML")]),v._v("，输出到客户端，到达客户端后重新展开为一个单页应用。")])])]),v._v(" "),e("h2",{attrs:{id:"_20-vue-组件的-data-为什么必须是函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_20-vue-组件的-data-为什么必须是函数"}},[v._v("#")]),v._v(" 20. "),e("em",[v._v("Vue")]),v._v(" 组件的 "),e("em",[v._v("data")]),v._v(" 为什么必须是函数")]),v._v(" "),e("blockquote",[e("p",[v._v("参考答案：")]),v._v(" "),e("p",[v._v("组件中的 "),e("em",[v._v("data")]),v._v(" 写成一个函数，数据以函数返回值形式定义。这样每复用一次组件，就会返回一份新的 "),e("em",[v._v("data")]),v._v("，类似于给每个组件实例创建一个私有的数据空间，让各个组件实例维护各自的数据。而单纯的写成对象形式，就使得所有组件实例共用了一份 "),e("em",[v._v("data")]),v._v("，就会造成一个变了全都会变的结果。")])]),v._v(" "),e("h2",{attrs:{id:"_21-说一下-vue-的-computed-的实现原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_21-说一下-vue-的-computed-的实现原理"}},[v._v("#")]),v._v(" 21. 说一下 "),e("em",[v._v("Vue")]),v._v(" 的 "),e("em",[v._v("computed")]),v._v(" 的实现原理")]),v._v(" "),e("blockquote",[e("p",[v._v("参考答案：")]),v._v(" "),e("p",[v._v("当组件实例触发生命周期函数 "),e("em",[v._v("beforeCreate")]),v._v(" 后，它会做一系列事情，其中就包括对 "),e("em",[v._v("computed")]),v._v(" 的处理。")]),v._v(" "),e("p",[v._v("它会遍历 "),e("em",[v._v("computed")]),v._v(" 配置中的所有属性，为每一个属性创建一个 "),e("em",[v._v("Watcher")]),v._v(" 对象，并传入一个函数，该函数的本质其实就是 "),e("em",[v._v("computed")]),v._v(" 配置中的 "),e("em",[v._v("getter")]),v._v("，这样一来，"),e("em",[v._v("getter")]),v._v(" 运行过程中就会收集依赖")]),v._v(" "),e("p",[v._v("但是和渲染函数不同，为计算属性创建的 "),e("em",[v._v("Watcher")]),v._v(" 不会立即执行，因为要考虑到该计算属性是否会被渲染函数使用，如果没有使用，就不会得到执行。因此，在创建 "),e("em",[v._v("Watcher")]),v._v(" 的时候，它使用了 "),e("em",[v._v("lazy")]),v._v(" 配置，"),e("em",[v._v("lazy")]),v._v(" 配置可以让 "),e("em",[v._v("Watcher")]),v._v(" 不会立即执行。")]),v._v(" "),e("p",[v._v("收到 "),e("em",[v._v("lazy")]),v._v(" 的影响，"),e("em",[v._v("Watcher")]),v._v(" 内部会保存两个关键属性来实现缓存，一个是 "),e("em",[v._v("value")]),v._v("，一个是 "),e("em",[v._v("dirty")])]),v._v(" "),e("p",[e("em",[v._v("value")]),v._v(" 属性用于保存 "),e("em",[v._v("Watcher")]),v._v(" 运行的结果，受 "),e("em",[v._v("lazy")]),v._v(" 的影响，该值在最开始是 "),e("em",[v._v("undefined")])]),v._v(" "),e("p",[e("em",[v._v("dirty")]),v._v(" 属性用于指示当前的 "),e("em",[v._v("value")]),v._v(" 是否已经过时了，即是否为脏值，受 "),e("em",[v._v("lazy")]),v._v(" 的影响，该值在最开始是 "),e("em",[v._v("true")])]),v._v(" "),e("p",[v._v("Watcher 创建好后，vue 会使用代理模式，将计算属性挂载到组件实例中")]),v._v(" "),e("p",[v._v("当读取计算属性时，"),e("em",[v._v("vue")]),v._v(" 检查其对应的 "),e("em",[v._v("Watcher")]),v._v(" 是否是脏值，如果是，则运行函数，计算依赖，并得到对应的值，保存在 "),e("em",[v._v("Watcher")]),v._v(" 的 "),e("em",[v._v("value")]),v._v(" 中，然后设置 "),e("em",[v._v("dirty")]),v._v(" 为 "),e("em",[v._v("false")]),v._v("，然后返回。")]),v._v(" "),e("p",[v._v("如果 "),e("em",[v._v("dirty")]),v._v(" 为 "),e("em",[v._v("false")]),v._v("，则直接返回 "),e("em",[v._v("watcher")]),v._v(" 的 "),e("em",[v._v("value")])]),v._v(" "),e("p",[v._v("巧妙的是，在依赖收集时，被依赖的数据不仅会收集到计算属性的 "),e("em",[v._v("Watcher")]),v._v("，还会收集到组件的 "),e("em",[v._v("Watcher")])]),v._v(" "),e("p",[v._v("当计算属性的依赖变化时，会先触发计算属性的 "),e("em",[v._v("Watcher")]),v._v(" 执行，此时，它只需设置 "),e("em",[v._v("dirty")]),v._v(" 为 "),e("em",[v._v("true")]),v._v(" 即可，不做任何处理。")]),v._v(" "),e("p",[v._v("由于依赖同时会收集到组件的 "),e("em",[v._v("Watcher")]),v._v("，因此组件会重新渲染，而重新渲染时又读取到了计算属性，由于计算属性目前已为 dirty，因此会重新运行 "),e("em",[v._v("getter")]),v._v(" 进行运算")]),v._v(" "),e("p",[v._v("而对于计算属性的 "),e("em",[v._v("setter")]),v._v("，则极其简单，当设置计算属性时，直接运行 "),e("em",[v._v("setter")]),v._v(" 即可。")])]),v._v(" "),e("h2",{attrs:{id:"_22-说一下-vue-complier-的实现原理是什么样的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_22-说一下-vue-complier-的实现原理是什么样的"}},[v._v("#")]),v._v(" 22. 说一下 "),e("em",[v._v("Vue complier")]),v._v(" 的实现原理是什么样的？")]),v._v(" "),e("blockquote",[e("p",[v._v("参考答案：")]),v._v(" "),e("p",[v._v("在使用 vue 的时候，我们有两种方式来创建我们的 HTML 页面，第一种情况，也是大多情况下，我们会使用模板 template 的方式，因为这更易读易懂也是官方推荐的方法；第二种情况是使用 render 函数来生成 HTML，它比 template 更接近最终结果。")]),v._v(" "),e("p",[v._v("complier 的主要作用是解析模板，生成渲染模板的 "),e("em",[v._v("render")]),v._v("， 而 "),e("em",[v._v("render")]),v._v(" 的作用主要是为了生成 "),e("em",[v._v("VNode")])]),v._v(" "),e("p",[v._v("complier 主要分为 3 大块：")]),v._v(" "),e("ul",[e("li",[v._v("parse：接受 template 原始模板，按着模板的节点和数据生成对应的 ast")]),v._v(" "),e("li",[v._v("optimize：遍历 ast 的每一个节点，标记静态节点，这样就知道哪部分不会变化，于是在页面需要更新时，通过 diff 减少去对比这部分 DOM，提升性能")]),v._v(" "),e("li",[v._v("generate 把前两步生成完善的 ast，组成 render 字符串，然后将 render 字符串通过 new Function 的方式转换成渲染函数")])])]),v._v(" "),e("h2",{attrs:{id:"_23-vue-如何快速定位那个组件出现性能问题的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_23-vue-如何快速定位那个组件出现性能问题的"}},[v._v("#")]),v._v(" 23. "),e("em",[v._v("vue")]),v._v(" 如何快速定位那个组件出现性能问题的")]),v._v(" "),e("blockquote",[e("p",[v._v("参考答案：")]),v._v(" "),e("p",[v._v("⽤ "),e("em",[v._v("timeline")]),v._v(" ⼯具。 通过 "),e("em",[v._v("timeline")]),v._v(" 来查看每个函数的调⽤时常，定位出哪个函数的问题，从⽽能判断哪个组件出了问题。")])]),v._v(" "),e("h2",{attrs:{id:"_24-proxy-相比-defineproperty-的优势在哪里"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_24-proxy-相比-defineproperty-的优势在哪里"}},[v._v("#")]),v._v(" 24. "),e("em",[v._v("Proxy")]),v._v(" 相比 "),e("em",[v._v("defineProperty")]),v._v(" 的优势在哪里")]),v._v(" "),e("blockquote",[e("p",[v._v("参考答案：")]),v._v(" "),e("p",[e("em",[v._v("Vue3.x")]),v._v(" 改用 "),e("em",[v._v("Proxy")]),v._v(" 替代 "),e("em",[v._v("Object.defineProperty")])]),v._v(" "),e("p",[v._v("原因在于 "),e("em",[v._v("Object.defineProperty")]),v._v(" 本身存在的一些问题：")]),v._v(" "),e("ul",[e("li",[e("em",[v._v("Object.defineProperty")]),v._v(" 只能劫持对象属性的 "),e("em",[v._v("getter")]),v._v(" 和 "),e("em",[v._v("setter")]),v._v(" 方法。")]),v._v(" "),e("li",[e("em",[v._v("Object.definedProperty")]),v._v(" 不支持数组(可以监听数组,不过数组方法无法监听自己重写)，更准确的说是不支持数组的各种 "),e("em",[v._v("API")]),v._v("(所以 "),e("em",[v._v("Vue")]),v._v(" 重写了数组方法。")])]),v._v(" "),e("p",[v._v("而相比 "),e("em",[v._v("Object.defineProperty")]),v._v("，"),e("em",[v._v("Proxy")]),v._v(" 的优点在于：")]),v._v(" "),e("ul",[e("li",[e("em",[v._v("Proxy")]),v._v(" 是直接代理劫持整个对象。")]),v._v(" "),e("li",[e("em",[v._v("Proxy")]),v._v(" 可以直接监听对象和数组的变化，并且有多达 "),e("em",[v._v("13")]),v._v(" 种拦截方法。")])]),v._v(" "),e("p",[v._v("目前，"),e("em",[v._v("Object.definedProperty")]),v._v(" 唯一比 "),e("em",[v._v("Proxy")]),v._v(" 好的一点就是兼容性，不过 "),e("em",[v._v("Proxy")]),v._v(" 新标准也受到浏览器厂商重点持续的性能优化当中。")])]),v._v(" "),e("h2",{attrs:{id:"_25-vue-与-angular-以及-react-的区别是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_25-vue-与-angular-以及-react-的区别是什么"}},[v._v("#")]),v._v(" 25. "),e("em",[v._v("Vue")]),v._v(" 与 "),e("em",[v._v("Angular")]),v._v(" 以及 "),e("em",[v._v("React")]),v._v(" 的区别是什么？")]),v._v(" "),e("blockquote",[e("p",[v._v("参考答案：")]),v._v(" "),e("p",[v._v("这种题目是开放性题目，一般是面试过程中面试官口头来提问，不太可能出现在笔试试卷里面。")]),v._v(" "),e("p",[v._v("关于 "),e("em",[v._v("Vue")]),v._v(" 和其他框架的不同，官方专门写了一篇文档，从性能、体积、灵活性等多个方面来进行了说明。")]),v._v(" "),e("p",[v._v("详细可以参阅："),e("em",[v._v("https://cn.vuejs.org/v2/guide/comparison.html")])]),v._v(" "),e("p",[v._v("建议面试前通读一遍该篇文档，然后进行适当的总结。")])]),v._v(" "),e("h2",{attrs:{id:"_26-说一下-watch-与-computed-的区别是什么-以及他们的使用场景分别是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_26-说一下-watch-与-computed-的区别是什么-以及他们的使用场景分别是什么"}},[v._v("#")]),v._v(" 26. 说一下 "),e("em",[v._v("watch")]),v._v(" 与 "),e("em",[v._v("computed")]),v._v(" 的区别是什么？以及他们的使用场景分别是什么？")]),v._v(" "),e("blockquote",[e("p",[v._v("参考答案：")]),v._v(" "),e("p",[v._v("区别：")]),v._v(" "),e("ol",[e("li",[v._v("都是观察数据变化的（相同）")]),v._v(" "),e("li",[v._v("计算属性将会混入到 vue 的实例中，所以需要监听自定义变量；watch 监听 data 、props 里面数据的变化；")]),v._v(" "),e("li",[v._v("computed 有缓存，它依赖的值变了才会重新计算，watch 没有；")]),v._v(" "),e("li",[v._v("watch 支持异步，computed 不支持；")]),v._v(" "),e("li",[v._v("watch 是一对多（监听某一个值变化，执行对应操作）；computed 是多对一（监听属性依赖于其他属性）")]),v._v(" "),e("li",[v._v("watch 监听函数接收两个参数，第一个是最新值，第二个是输入之前的值；")]),v._v(" "),e("li",[v._v("computed 属性是函数时，都有 get 和 set 方法，默认走 get 方法，get 必须有返回值（return）")])]),v._v(" "),e("p",[v._v("watch 的 参数：")]),v._v(" "),e("ul",[e("li",[v._v("deep：深度监听")]),v._v(" "),e("li",[v._v("immediate ：组件加载立即触发回调函数执行")])]),v._v(" "),e("p",[v._v("computed 缓存原理：")]),v._v(" "),e("p",[v._v("conputed 本质是一个惰性的观察者；当计算数据存在于 data 或者 props 里时会被警告；")]),v._v(" "),e("p",[v._v("vue 初次运行会对 computed 属性做初始化处理（initComputed），初始化的时候会对每一个 computed 属性用 watcher 包装起来 ，这里面会生成一个 dirty 属性值为 true；然后执行 defineComputed 函数来计算，计算之后会将 dirty 值变为 false，这里会根据 dirty 值来判断是否需要重新计算；如果属性依赖的数据发生变化，computed 的 watcher 会把 dirty 变为 true，这样就会重新计算 computed 属性的值。")])]),v._v(" "),e("h2",{attrs:{id:"_27-scoped-是如何实现样式穿透的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_27-scoped-是如何实现样式穿透的"}},[v._v("#")]),v._v(" 27. "),e("em",[v._v("scoped")]),v._v(" 是如何实现样式穿透的？")]),v._v(" "),e("blockquote",[e("p",[v._v("参考答案：")]),v._v(" "),e("p",[v._v("首先说一下什么场景下需要 "),e("em",[v._v("scoped")]),v._v(" 样式穿透。")]),v._v(" "),e("p",[v._v("在很多项目中，会出现这么一种情况，即：引用了第三方组件，需要在组件中局部修改第三方组件的样式，而又不想去除 "),e("em",[v._v("scoped")]),v._v(" 属性造成组件之间的样式污染。此时只能通过特殊的方式，穿透 "),e("em",[v._v("scoped")]),v._v("。")]),v._v(" "),e("p",[v._v("有三种常用的方法来实现样式穿透。")]),v._v(" "),e("p",[v._v("方法一")]),v._v(" "),e("p",[v._v("使用 "),e("em",[v._v("::v-deep")]),v._v(" 操作符( >>> 的别名)")]),v._v(" "),e("p",[v._v("如果希望 "),e("em",[v._v("scoped")]),v._v(" 样式中的一个选择器能够作用得“更深”，例如影响子组件，可以使用 >>> 操作符：")]),v._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("<")]),v._v("style scoped"),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),v._v("a "),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v(">>>")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),v._v("b "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),e("span",{pre:!0,attrs:{class:"token comment"}},[v._v("/* ... */")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("/")]),v._v("style"),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v(">")]),v._v("\n")])])]),e("p",[v._v("上述代码将会编译成：")]),v._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),v._v("a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("[")]),v._v("data"),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("-")]),v._v("v"),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("-")]),v._v("f3f3eg9"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("]")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),v._v("b "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[v._v("/* ... */")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),v._v("\n")])])]),e("p",[v._v("后面的类名没有 "),e("em",[v._v("data")]),v._v(" 属性，所以能选到子组件里面的类名。")]),v._v(" "),e("p",[v._v("有些像 "),e("em",[v._v("Sass")]),v._v(" 之类的预处理器无法正确解析 >>>，所以需要使用 "),e("em",[v._v("::v-deep")]),v._v(" 操作符来代替。")]),v._v(" "),e("p",[v._v("方法二")]),v._v(" "),e("p",[v._v("定义一个含有 "),e("em",[v._v("scoped")]),v._v(" 属性的 "),e("em",[v._v("style")]),v._v(" 标签之外，再定义一个不含有 "),e("em",[v._v("scoped")]),v._v(" 属性的 "),e("em",[v._v("style")]),v._v(" 标签，即在一个 "),e("em",[v._v("vue")]),v._v(" 组件中定义一个全局的 "),e("em",[v._v("style")]),v._v(" 标签，一个含有作用域的 "),e("em",[v._v("style")]),v._v(" 标签：")]),v._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("<")]),v._v("style"),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v(">")]),v._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[v._v("/* global styles */")]),v._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("/")]),v._v("style"),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v(">")]),v._v("\n\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("<")]),v._v("style scoped"),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v(">")]),v._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[v._v("/* local styles */")]),v._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("/")]),v._v("style"),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v(">")]),v._v("\n")])])]),e("p",[v._v("此时，我们只需要将修改第三方样式的 "),e("em",[v._v("css")]),v._v(" 写在第一个 "),e("em",[v._v("style")]),v._v(" 中即可。")]),v._v(" "),e("p",[v._v("方法三")]),v._v(" "),e("p",[v._v("上面的方法一需要单独书写一个不含有 "),e("em",[v._v("scoped")]),v._v(" 属性的 "),e("em",[v._v("style")]),v._v(" 标签，可能会造成全局样式的污染。")]),v._v(" "),e("p",[v._v("更推荐的方式是在组件的外层 "),e("em",[v._v("DOM")]),v._v(" 上添加唯一的 "),e("em",[v._v("class")]),v._v(" 来区分不同组件，在书写样式时就可以正常针对针对这部分 "),e("em",[v._v("DOM")]),v._v(" 书写样式。")])]),v._v(" "),e("h2",{attrs:{id:"_28-说一下-ref-的作用是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_28-说一下-ref-的作用是什么"}},[v._v("#")]),v._v(" 28. 说一下 "),e("em",[v._v("ref")]),v._v(" 的作用是什么？")]),v._v(" "),e("blockquote",[e("p",[v._v("参考答案：")]),v._v(" "),e("p",[e("em",[v._v("ref")]),v._v(" 的作用是被用来给元素或子组件注册引用信息。引用信息将会注册在父组件的 "),e("em",[v._v("$refs")]),v._v(" 对象上。其特点是：")]),v._v(" "),e("ul",[e("li",[v._v("如果在普通的 "),e("em",[v._v("DOM")]),v._v(" 元素上使用，引用指向的就是 "),e("em",[v._v("DOM")]),v._v(" 元素")]),v._v(" "),e("li",[v._v("如果用在子组件上，引用就指向组件实例")])]),v._v(" "),e("p",[v._v("所以常见的使用场景有：")]),v._v(" "),e("ol",[e("li",[v._v("基本用法，本页面获取 "),e("em",[v._v("DOM")]),v._v(" 元素")]),v._v(" "),e("li",[v._v("获取子组件中的 "),e("em",[v._v("data")])]),v._v(" "),e("li",[v._v("调用子组件中的方法")])])]),v._v(" "),e("h2",{attrs:{id:"_29-说一下你知道的-vue-修饰符都有哪些"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_29-说一下你知道的-vue-修饰符都有哪些"}},[v._v("#")]),v._v(" 29. 说一下你知道的 "),e("em",[v._v("vue")]),v._v(" 修饰符都有哪些？")]),v._v(" "),e("blockquote",[e("p",[v._v("参考答案：")]),v._v(" "),e("p",[v._v("在 "),e("em",[v._v("vue")]),v._v(" 中修饰符可以分为 "),e("em",[v._v("3")]),v._v(" 类：")]),v._v(" "),e("ul",[e("li",[v._v("事件修饰符")]),v._v(" "),e("li",[v._v("按键修饰符")]),v._v(" "),e("li",[v._v("表单修饰符")])]),v._v(" "),e("p",[v._v("事件修饰符")]),v._v(" "),e("p",[v._v("在事件处理程序中调用 "),e("em",[v._v("event.preventDefault")]),v._v(" 或 "),e("em",[v._v("event.stopPropagation")]),v._v(" 方法是非常常见的需求。尽管可以在 "),e("em",[v._v("methods")]),v._v(" 中轻松实现这点，但更好的方式是："),e("em",[v._v("methods")]),v._v(" 只有纯粹的数据逻辑，而不是去处理 "),e("em",[v._v("DOM")]),v._v(" 事件细节。")]),v._v(" "),e("p",[v._v("为了解决这个问题，"),e("em",[v._v("vue")]),v._v(" 为 "),e("em",[v._v("v-on")]),v._v(" 提供了事件修饰符。通过由点 "),e("em",[v._v(".")]),v._v(" 表示的指令后缀来调用修饰符。")]),v._v(" "),e("p",[v._v("常见的事件修饰符如下：")]),v._v(" "),e("ul",[e("li",[e("em",[v._v(".stop")]),v._v("：阻止冒泡。")]),v._v(" "),e("li",[e("em",[v._v(".prevent")]),v._v("：阻止默认事件。")]),v._v(" "),e("li",[e("em",[v._v(".capture")]),v._v("：使用事件捕获模式。")]),v._v(" "),e("li",[e("em",[v._v(".self")]),v._v("：只在当前元素本身触发。")]),v._v(" "),e("li",[e("em",[v._v(".once")]),v._v("：只触发一次。")]),v._v(" "),e("li",[e("em",[v._v(".passive")]),v._v("：默认行为将会立即触发。")])]),v._v(" "),e("p",[v._v("按键修饰符")]),v._v(" "),e("p",[v._v("除了事件修饰符以外，在 "),e("em",[v._v("vue")]),v._v(" 中还提供了有鼠标修饰符，键值修饰符，系统修饰符等功能。")]),v._v(" "),e("ul",[e("li",[v._v("."),e("em",[v._v("left")]),v._v("：左键")]),v._v(" "),e("li",[v._v("."),e("em",[v._v("right")]),v._v("：右键")]),v._v(" "),e("li",[v._v("."),e("em",[v._v("middle")]),v._v("：滚轮")]),v._v(" "),e("li",[v._v("."),e("em",[v._v("enter")]),v._v("：回车")]),v._v(" "),e("li",[v._v("."),e("em",[v._v("tab")]),v._v("：制表键")]),v._v(" "),e("li",[v._v("."),e("em",[v._v("delete")]),v._v("：捕获 “删除” 和 “退格” 键")]),v._v(" "),e("li",[v._v("."),e("em",[v._v("esc")]),v._v("：返回")]),v._v(" "),e("li",[v._v("."),e("em",[v._v("space")]),v._v("：空格")]),v._v(" "),e("li",[v._v("."),e("em",[v._v("up")]),v._v("：上")]),v._v(" "),e("li",[v._v("."),e("em",[v._v("down")]),v._v("：下")]),v._v(" "),e("li",[v._v("."),e("em",[v._v("left")]),v._v("：左")]),v._v(" "),e("li",[v._v("."),e("em",[v._v("right")]),v._v("：右")]),v._v(" "),e("li",[v._v("."),e("em",[v._v("ctrl")]),v._v("："),e("em",[v._v("ctrl")]),v._v(" 键")]),v._v(" "),e("li",[v._v("."),e("em",[v._v("alt")]),v._v("："),e("em",[v._v("alt")]),v._v(" 键")]),v._v(" "),e("li",[v._v("."),e("em",[v._v("shift")]),v._v("："),e("em",[v._v("shift")]),v._v(" 键")]),v._v(" "),e("li",[v._v("."),e("em",[v._v("meta")]),v._v("："),e("em",[v._v("meta")]),v._v(" 键")])]),v._v(" "),e("p",[v._v("表单修饰符")]),v._v(" "),e("p",[e("em",[v._v("vue")]),v._v(" 同样也为表单控件也提供了修饰符，常见的有 "),e("em",[v._v(".lazy")]),v._v("、"),e("em",[v._v(".number")]),v._v(" 和 "),e("em",[v._v(".trim")]),v._v("。")]),v._v(" "),e("ul",[e("li",[v._v("."),e("em",[v._v("lazy")]),v._v("：在文本框失去焦点时才会渲染")]),v._v(" "),e("li",[v._v("."),e("em",[v._v("number")]),v._v("：将文本框中所输入的内容转换为 number 类型")]),v._v(" "),e("li",[v._v("."),e("em",[v._v("trim")]),v._v("：可以自动过滤输入首尾的空格")])])]),v._v(" "),e("h2",{attrs:{id:"_30-如何实现-vue-项目中的性能优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_30-如何实现-vue-项目中的性能优化"}},[v._v("#")]),v._v(" 30. 如何实现 "),e("em",[v._v("vue")]),v._v(" 项目中的性能优化？")]),v._v(" "),e("blockquote",[e("p",[v._v("直播课讲解")])]),v._v(" "),e("blockquote",[e("p",[v._v("参考答案：")]),v._v(" "),e("p",[v._v("编码阶段")]),v._v(" "),e("ul",[e("li",[v._v("尽量减少 "),e("em",[v._v("data")]),v._v(" 中的数据，"),e("em",[v._v("data")]),v._v(" 中的数据都会增加 "),e("em",[v._v("getter")]),v._v(" 和 "),e("em",[v._v("setter")]),v._v("，会收集对应的 "),e("em",[v._v("watcher")])]),v._v(" "),e("li",[e("em",[v._v("v-if")]),v._v(" 和 "),e("em",[v._v("v-for")]),v._v(" 不能连用")]),v._v(" "),e("li",[v._v("如果需要使用 "),e("em",[v._v("v-for")]),v._v(" 给每项元素绑定事件时使用事件代理")]),v._v(" "),e("li",[e("em",[v._v("SPA")]),v._v(" 页面采用 "),e("em",[v._v("keep-alive")]),v._v(" 缓存组件")]),v._v(" "),e("li",[v._v("在更多的情况下，使用 "),e("em",[v._v("v-if")]),v._v(" 替代 "),e("em",[v._v("v-show")])]),v._v(" "),e("li",[e("em",[v._v("key")]),v._v(" 保证唯一")]),v._v(" "),e("li",[v._v("使用路由懒加载、异步组件")]),v._v(" "),e("li",[v._v("防抖、节流")]),v._v(" "),e("li",[v._v("第三方模块按需导入")]),v._v(" "),e("li",[v._v("长列表滚动到可视区域动态加载")]),v._v(" "),e("li",[v._v("图片懒加载")])]),v._v(" "),e("p",[e("em",[v._v("SEO")]),v._v(" 优化")]),v._v(" "),e("ul",[e("li",[v._v("预渲染")]),v._v(" "),e("li",[v._v("服务端渲染 "),e("em",[v._v("SSR")])])]),v._v(" "),e("p",[v._v("打包优化")]),v._v(" "),e("ul",[e("li",[v._v("压缩代码")]),v._v(" "),e("li",[e("em",[v._v("Tree Shaking/Scope Hoisting")])]),v._v(" "),e("li",[v._v("使用 "),e("em",[v._v("cdn")]),v._v(" 加载第三方模块")]),v._v(" "),e("li",[v._v("多线程打包 "),e("em",[v._v("happypack")])]),v._v(" "),e("li",[e("em",[v._v("splitChunks")]),v._v(" 抽离公共文件")]),v._v(" "),e("li",[e("em",[v._v("sourceMap")]),v._v(" 优化")])]),v._v(" "),e("p",[v._v("用户体验")]),v._v(" "),e("ul",[e("li",[v._v("骨架屏")]),v._v(" "),e("li",[e("em",[v._v("PWA")])])]),v._v(" "),e("p",[v._v("还可以使用缓存(客户端缓存、服务端缓存)优化、服务端开启 "),e("em",[v._v("gzip")]),v._v(" 压缩等。")])]),v._v(" "),e("h2",{attrs:{id:"_31-vue-extend-和-vue-component-的区别是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_31-vue-extend-和-vue-component-的区别是什么"}},[v._v("#")]),v._v(" 31. "),e("em",[v._v("Vue.extend")]),v._v(" 和 "),e("em",[v._v("Vue.component")]),v._v(" 的区别是什么？")]),v._v(" "),e("blockquote",[e("p",[v._v("参考答案：")]),v._v(" "),e("p",[e("em",[v._v("Vue.extend")]),v._v(" 用于创建一个基于 "),e("em",[v._v("Vue")]),v._v(" 构造函数的“子类”，其参数应为一个包含组件选项的对象。")]),v._v(" "),e("p",[e("em",[v._v("Vue.component")]),v._v(" 用来注册全局组件。")])]),v._v(" "),e("h2",{attrs:{id:"_32-vue-中的-spa-应用如何优化首屏加载速度"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_32-vue-中的-spa-应用如何优化首屏加载速度"}},[v._v("#")]),v._v(" 32. "),e("em",[v._v("vue")]),v._v(" 中的 "),e("em",[v._v("spa")]),v._v(" 应用如何优化首屏加载速度?")]),v._v(" "),e("blockquote",[e("p",[v._v("参考答案：")]),v._v(" "),e("p",[v._v("优化首屏加载可以从这几个方面开始：")]),v._v(" "),e("ul",[e("li",[v._v("请求优化：CDN 将第三方的类库放到 CDN 上，能够大幅度减少生产环境中的项目体积，另外 CDN 能够实时地根据网络流量和各节点的连接、负载状况以及到用户的距离和响应时间等综合信息将用户的请求重新导向离用户最近的服务节点上。")]),v._v(" "),e("li",[v._v("缓存：将长时间不会改变的第三方类库或者静态资源设置为强缓存，将 max-age 设置为一个非常长的时间，再将访问路径加上哈希达到哈希值变了以后保证获取到最新资源，好的缓存策略有助于减轻服务器的压力，并且显著的提升用户的体验")]),v._v(" "),e("li",[v._v("gzip：开启 gzip 压缩，通常开启 gzip 压缩能够有效的缩小传输资源的大小。")]),v._v(" "),e("li",[v._v("http2：如果系统首屏同一时间需要加载的静态资源非常多，但是浏览器对同域名的 tcp 连接数量是有限制的(chrome 为 6 个)超过规定数量的 tcp 连接，则必须要等到之前的请求收到响应后才能继续发送，而 http2 则可以在多个 tcp 连接中并发多个请求没有限制，在一些网络较差的环境开启 http2 性能提升尤为明显。")]),v._v(" "),e("li",[v._v("懒加载：当 url 匹配到相应的路径时，通过 import 动态加载页面组件，这样首屏的代码量会大幅减少，webpack 会把动态加载的页面组件分离成单独的一个 chunk.js 文件")]),v._v(" "),e("li",[v._v("预渲染：由于浏览器在渲染出页面之前，需要先加载和解析相应的 html、css 和 js 文件，为此会有一段白屏的时间，可以添加 loading，或者骨架屏幕尽可能的减少白屏对用户的影响体积优化")]),v._v(" "),e("li",[v._v("合理使用第三方库：对于一些第三方 ui 框架、类库，尽量使用按需加载，减少打包体积")]),v._v(" "),e("li",[v._v("使用可视化工具分析打包后的模块体积：webpack-bundle- analyzer 这个插件在每次打包后能够更加直观的分析打包后模块的体积，再对其中比较大的模块进行优化")]),v._v(" "),e("li",[v._v("提高代码使用率：利用代码分割，将脚本中无需立即调用的代码在代码构建时转变为异步加载的过程")]),v._v(" "),e("li",[v._v("封装：构建良好的项目架构，按照项目需求就行全局组件，插件，过滤器，指令，utils 等做一 些公共封装，可以有效减少我们的代码量，而且更容易维护资源优化")]),v._v(" "),e("li",[v._v("图片懒加载：使用图片懒加载可以优化同一时间减少 http 请求开销，避免显示图片导致的画面抖动，提高用户体验")]),v._v(" "),e("li",[v._v("使用 svg 图标：相对于用一张图片来表示图标，svg 拥有更好的图片质量，体积更小，并且不需要开启额外的 http 请求")]),v._v(" "),e("li",[v._v("压缩图片：可以使用 image-webpack-loader，在用户肉眼分辨不清的情况下一定程度上压缩图片")])])]),v._v(" "),e("h2",{attrs:{id:"_33-移动端如何实现一个比较友好的-header-组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_33-移动端如何实现一个比较友好的-header-组件"}},[v._v("#")]),v._v(" 33. 移动端如何实现一个比较友好的 "),e("em",[v._v("header")]),v._v(" 组件")]),v._v(" "),e("blockquote",[e("p",[v._v("参考答案：")]),v._v(" "),e("p",[e("em",[v._v("Header")]),v._v(" 一般分为左、中、右三个部分，分为三个区域来设计，中间为主标题，每个页面的标题肯定不同，所以可以通过 "),e("em",[v._v("vue props")]),v._v("的方式做成可配置对外进行暴露，左侧大部分页面可能都是回退按钮，但是样式和内容不尽相同，右侧一般都是具有功能性的操作按钮，所以左右两侧可以通过 "),e("em",[v._v("vue slot")]),v._v(" 插槽的方式对外暴露以实现多样化，同时也可以提供 "),e("em",[v._v("default slot")]),v._v(" 默认插槽来统一页面风格。")])]),v._v(" "),e("h2",{attrs:{id:"_34-既然-vue-通过数据劫持可以精准探测数据变化-为什么还需要虚拟-dom-进行-diff-监测差异"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_34-既然-vue-通过数据劫持可以精准探测数据变化-为什么还需要虚拟-dom-进行-diff-监测差异"}},[v._v("#")]),v._v(" 34. 既然 "),e("em",[v._v("Vue")]),v._v(" 通过数据劫持可以精准探测数据变化，为什么还需要虚拟 "),e("em",[v._v("DOM")]),v._v(" 进行 "),e("em",[v._v("diff")]),v._v(" 监测差异 ？")]),v._v(" "),e("blockquote",[e("p",[v._v("参考答案：")]),v._v(" "),e("p",[v._v("现代前端框架有两种方式侦测变化，一种是 "),e("em",[v._v("pull")]),v._v("，一种是 "),e("em",[v._v("push")]),v._v("。")]),v._v(" "),e("p",[e("em",[v._v("pull")])]),v._v(" "),e("p",[v._v("其代表为 "),e("em",[v._v("React")]),v._v("，我们可以回忆一下 "),e("em",[v._v("React")]),v._v(" 是如何侦测到变化的。")]),v._v(" "),e("p",[v._v("我们通常会用 "),e("em",[v._v("setState API")]),v._v(" 显式更新,然后 "),e("em",[v._v("React")]),v._v(" 会进行一层层的 "),e("em",[v._v("Virtual Dom Diff")]),v._v(" 操作找出差异，然后 "),e("em",[v._v("Patch")]),v._v(" 到 "),e("em",[v._v("DOM")]),v._v(" 上，"),e("em",[v._v("React")]),v._v(" 从一开始就不知道到底是哪发生了变化,只是知道「有变化了」,然后再进行比较暴力的 "),e("em",[v._v("Diff")]),v._v(" 操作查找「哪发生变化了」，另外一个代表就是 "),e("em",[v._v("Angular")]),v._v(" 的脏检查操作。")]),v._v(" "),e("p",[e("em",[v._v("push")])]),v._v(" "),e("p",[e("em",[v._v("Vue")]),v._v(" 的响应式系统则是 "),e("em",[v._v("push")]),v._v(" 的代表，当 "),e("em",[v._v("Vue")]),v._v(" 程序初始化的时候就会对数据 "),e("em",[v._v("data")]),v._v(" 进行依赖的收集，一但数据发生变化，响应式系统就会立刻得知，因此 "),e("em",[v._v("Vue")]),v._v(" 是一开始就知道是「在哪发生变化了」")]),v._v(" "),e("p",[v._v("但是这又会产生一个问题，通常绑定一个数据就需要一个 "),e("em",[v._v("Watcher")]),v._v("，一但我们的绑定细粒度过高就会产生大量的 "),e("em",[v._v("Watcher")]),v._v("，这会带来内存以及依赖追踪的开销，而细粒度过低会无法精准侦测变化，因此 "),e("em",[v._v("Vue")]),v._v(" 的设计是选择中等细粒度的方案，在组件级别进行 "),e("em",[v._v("push")]),v._v(" 侦测的方式，也就是那套响应式系统。")]),v._v(" "),e("p",[v._v("通常我们会第一时间侦测到发生变化的组件,然后在组件内部进行 "),e("em",[v._v("Virtual Dom Diff")]),v._v(" 获取更加具体的差异，而 "),e("em",[v._v("Virtual Dom Diff")]),v._v(" 则是 "),e("em",[v._v("pull")]),v._v(" 操作，"),e("em",[v._v("Vue")]),v._v(" 是 "),e("em",[v._v("push + pull")]),v._v(" 结合的方式进行变化侦测的。")])]),v._v(" "),e("h2",{attrs:{id:"_35-vue-为什么没有类似于-react-中-shouldcomponentupdate-的生命周期"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_35-vue-为什么没有类似于-react-中-shouldcomponentupdate-的生命周期"}},[v._v("#")]),v._v(" 35. "),e("em",[v._v("Vue")]),v._v(" 为什么没有类似于 "),e("em",[v._v("React")]),v._v(" 中 "),e("em",[v._v("shouldComponentUpdate")]),v._v(" 的生命周期？")]),v._v(" "),e("blockquote",[e("p",[v._v("参考答案：")]),v._v(" "),e("p",[v._v("根本原因是 "),e("em",[v._v("Vue")]),v._v(" 与 "),e("em",[v._v("React")]),v._v(" 的变化侦测方式有所不同")]),v._v(" "),e("p",[e("em",[v._v("React")]),v._v(" 是 "),e("em",[v._v("pull")]),v._v(" 的方式侦测变化，当 "),e("em",[v._v("React")]),v._v(" 知道发生变化后，会使用 "),e("em",[v._v("Virtual Dom Diff")]),v._v(" 进行差异检测,但是很多组件实际上是肯定不会发生变化的，这个时候需要用 "),e("em",[v._v("shouldComponentUpdate")]),v._v(" 进行手动操作来减少 "),e("em",[v._v("diff")]),v._v("，从而提高程序整体的性能。")]),v._v(" "),e("p",[e("em",[v._v("Vue")]),v._v(" 是 "),e("em",[v._v("pull+push")]),v._v(" 的方式侦测变化的，在一开始就知道那个组件发生了变化，因此在 "),e("em",[v._v("push")]),v._v(" 的阶段并不需要手动控制 "),e("em",[v._v("diff")]),v._v("，而组件内部采用的 "),e("em",[v._v("diff")]),v._v(" 方式实际上是可以引入类似于 "),e("em",[v._v("shouldComponentUpdate")]),v._v(" 相关生命周期的，但是通常合理大小的组件不会有过量的 "),e("em",[v._v("diff")]),v._v("，手动优化的价值有限，因此目前 "),e("em",[v._v("Vue")]),v._v(" 并没有考虑引入 "),e("em",[v._v("shouldComponentUpdate")]),v._v(" 这种手动优化的生命周期。")])]),v._v(" "),e("h2",{attrs:{id:"_36-vue-中的-key-的作用是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_36-vue-中的-key-的作用是什么"}},[v._v("#")]),v._v(" 36. "),e("em",[v._v("Vue")]),v._v(" 中的 "),e("em",[v._v("Key")]),v._v(" 的作用是什么？")]),v._v(" "),e("blockquote",[e("p",[v._v("参考答案：")]),v._v(" "),e("p",[e("em",[v._v("key")]),v._v(" 的作用主要是为了高效的更新虚拟 "),e("em",[v._v("DOM")]),v._v("。另外 "),e("em",[v._v("vue")]),v._v(" 中在使用相同标签名元素的过渡切换时，也会使用到 "),e("em",[v._v("key")]),v._v(" 属性，其目的也是为了让 "),e("em",[v._v("vue")]),v._v(" 可以区分它们，否则 "),e("em",[v._v("vue")]),v._v(" 只会替换其内部属性而不会触发过渡效果。")])]),v._v(" "),e("blockquote",[e("p",[v._v("解析：")]),v._v(" "),e("p",[v._v("其实不只是 "),e("em",[v._v("vue")]),v._v("，"),e("em",[v._v("react")]),v._v(" 中在执行列表渲染时也会要求给每个组件添加上 "),e("em",[v._v("key")]),v._v(" 这个属性。")]),v._v(" "),e("p",[v._v("要解释 "),e("em",[v._v("key")]),v._v(" 的作用，不得不先介绍一下虚拟 "),e("em",[v._v("DOM")]),v._v(" 的 "),e("em",[v._v("Diff")]),v._v(" 算法了。")]),v._v(" "),e("p",[v._v("我们知道，"),e("em",[v._v("vue")]),v._v(" 和 "),e("em",[v._v("react")]),v._v(" 都实现了一套虚拟 "),e("em",[v._v("DOM")]),v._v("，使我们可以不直接操作 "),e("em",[v._v("DOM")]),v._v(" 元素，只操作数据便可以重新渲染页面。而隐藏在背后的原理便是其高效的 "),e("em",[v._v("Diff")]),v._v(" 算法。")]),v._v(" "),e("p",[e("em",[v._v("vue")]),v._v(" 和 "),e("em",[v._v("react")]),v._v(" 的虚拟 "),e("em",[v._v("DOM")]),v._v(" 的 "),e("em",[v._v("Diff")]),v._v(" 算法大致相同，其核心有以下两点：")]),v._v(" "),e("ul",[e("li",[e("p",[v._v("两个相同的组件产生类似的 "),e("em",[v._v("DOM")]),v._v(" 结构，不同的组件产生不同的 "),e("em",[v._v("DOM")]),v._v(" 结构。")])]),v._v(" "),e("li",[e("p",[v._v("同一层级的一组节点，他们可以通过唯一的 "),e("em",[v._v("id")]),v._v(" 进行区分。")])])]),v._v(" "),e("p",[v._v("基于以上这两点，使得虚拟 "),e("em",[v._v("DOM")]),v._v(" 的 "),e("em",[v._v("Diff")]),v._v(" 算法的复杂度从 "),e("em",[v._v("O(n^3)")]),v._v(" 降到了 "),e("em",[v._v("O(n)")]),v._v("。")]),v._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2021-08-21-062058.png",alt:"image-20210821142057777"}}),v._v(" "),e("p",[v._v("当页面的数据发生变化时，"),e("em",[v._v("Diff")]),v._v(" 算法只会比较同一层级的节点：")]),v._v(" "),e("ul",[e("li",[v._v("如果节点类型不同，直接干掉前面的节点，再创建并插入新的节点，不会再比较这个节点以后的子节点了。")]),v._v(" "),e("li",[v._v("如果节点类型相同，则会重新设置该节点的属性，从而实现节点的更新。")])]),v._v(" "),e("p",[v._v("当某一层有很多相同的节点时，也就是列表节点时，"),e("em",[v._v("Diff")]),v._v(" 算法的更新过程默认情况下也是遵循以上原则。")]),v._v(" "),e("p",[v._v("比如一下这个情况：")]),v._v(" "),e("p",[e("img",{attrs:{src:"https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2021-08-21-062225.jpg",alt:"img"}})]),v._v(" "),e("p",[v._v("我们希望可以在 "),e("em",[v._v("B")]),v._v(" 和 "),e("em",[v._v("C")]),v._v(" 之间加一个 "),e("em",[v._v("F")]),v._v("，"),e("em",[v._v("Diff")]),v._v(" 算法默认执行起来是这样的：")]),v._v(" "),e("p",[e("img",{attrs:{src:"https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2021-08-21-062244.jpg",alt:"img"}})]),v._v(" "),e("p",[v._v("即把 "),e("em",[v._v("C")]),v._v(" 更新成 "),e("em",[v._v("F")]),v._v("，"),e("em",[v._v("D")]),v._v(" 更新成 "),e("em",[v._v("C")]),v._v("，"),e("em",[v._v("E")]),v._v(" 更新成 "),e("em",[v._v("D")]),v._v("，最后再插入 "),e("em",[v._v("E")])]),v._v(" "),e("p",[v._v("是不是很没有效率？")]),v._v(" "),e("p",[v._v("所以我们需要使用 "),e("em",[v._v("key")]),v._v(" 来给每个节点做一个唯一标识，"),e("em",[v._v("Diff")]),v._v(" 算法就可以正确的识别此节点，找到正确的位置区插入新的节点。")]),v._v(" "),e("p",[e("img",{attrs:{src:"https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2021-08-21-062321.jpg",alt:"img"}})])]),v._v(" "),e("h2",{attrs:{id:"_37-你的接口请求一般放在哪个生命周期中-为什么要这样做"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_37-你的接口请求一般放在哪个生命周期中-为什么要这样做"}},[v._v("#")]),v._v(" 37. 你的接口请求一般放在哪个生命周期中？为什么要这样做？")]),v._v(" "),e("blockquote",[e("p",[v._v("参考答案：")]),v._v(" "),e("p",[v._v("接口请求可以放在钩子函数 "),e("em",[v._v("created、beforeMount、mounted")]),v._v(" 中进行调用，因为在这三个钩子函数中，"),e("em",[v._v("data")]),v._v(" 已经创建，可以将服务端端返回的数据进行赋值。")]),v._v(" "),e("p",[v._v("但是推荐在 "),e("em",[v._v("created")]),v._v(" 钩子函数中调用异步请求，因为在 "),e("em",[v._v("created")]),v._v(" 钩子函数中调用异步请求有以下优点：")]),v._v(" "),e("ul",[e("li",[v._v("能更快获取到服务端数据，减少页面 "),e("em",[v._v("loading")]),v._v(" 时间")]),v._v(" "),e("li",[e("em",[v._v("SSR")]),v._v(" 不支持 "),e("em",[v._v("beforeMount 、mounted")]),v._v(" 钩子函数，所以放在 "),e("em",[v._v("created")]),v._v(" 中有助于代码的一致性")]),v._v(" "),e("li",[e("em",[v._v("created")]),v._v(" 是在模板渲染成 "),e("em",[v._v("html")]),v._v(" 前调用，即通常初始化某些属性值，然后再渲染成视图。如果在 "),e("em",[v._v("mounted")]),v._v(" 钩子函数中请求数据可能导致页面闪屏问题")])])]),v._v(" "),e("h2",{attrs:{id:"_38-说一下你对-vue-事件绑定原理的理解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_38-说一下你对-vue-事件绑定原理的理解"}},[v._v("#")]),v._v(" 38. 说一下你对 "),e("em",[v._v("vue")]),v._v(" 事件绑定原理的理解？")]),v._v(" "),e("blockquote",[e("p",[v._v("参考答案：")]),v._v(" "),e("p",[e("em",[v._v("vue")]),v._v(" 中的事件绑定是有两种，一种是原生的事件绑定，另一种是组件的事件绑定。")]),v._v(" "),e("p",[v._v("原生的事件绑定在普通元素上是通过 "),e("em",[v._v("@click")]),v._v(" 进行绑定，在组件上是通过 "),e("em",[v._v("@click.native")]),v._v(" 进行绑定，组件中的 "),e("em",[v._v("nativeOn")]),v._v(" 是等价于 on 的。组件的事件绑定的 @click 是 vue 中自定义的 $on 方法来实现的，必须有 $emit 才可以触发。")]),v._v(" "),e("p",[v._v("原生事件绑定原理")]),v._v(" "),e("p",[v._v("在 runtime 下的 patch.js 中 createPatchFunction 执行了之后再赋值给 patch。")]),v._v(" "),e("p",[v._v("createPatchFunction 方法有两个参数，分别是 nodeOps 存放操作 dom 节点的方法和 modules，modules 是有两个数组拼接起来的，modules 拼接完的数组中有一个元素就是 events，事件添加就发生在这里。")]),v._v(" "),e("p",[v._v("events 元素关联的就是 events.js 文件，在 events 中有一个 updateDOMListeners 方法，在 events 文件的结尾导出了一个对象，然后对象有一个属性叫做 create，这个属性关联的就是 updateDOMListeners 方法。")]),v._v(" "),e("p",[v._v("在执行 createPatchFunction 方法时，就会将这两个参数传入，在 createPatchFunction 方法中接收了一个参数 backend，在该方法中一开始进行 backend 的解构，就是上面的 nodeOps 和 modules 参数，解构完之后进入 for 循环。")]),v._v(" "),e("p",[v._v("在 createPatchFunction 开头定义了一个 cbs 对象。for 循环遍历一个叫 hooks 的数组。hooks 是文件一开头定义的一个数组，其中包括有 create，for 循环就是在 cbs 上定义一系列和 hooks 元素相同的属性，然后键值是一个数组，然后数组内容是 modules 里面的一些内容。这时就把 events 文件中导出来的 create 属性放在了 cbs 上。")]),v._v(" "),e("p",[v._v("当我们进入首次渲染的时候，会执行到 patch 函数里面的 createElm 方法，这个方法中就会调用 invokeCreateHooks 函数，用来处理事件系统，这里就是真正准备进行原生事件绑定的入口。invokeCreateHooks 方法中，遍历了 cbs.create 数组里面的内容。然后把 cbs.create 里面的函数全部都执行一次，在 cbs.create 其中一个函数就是 updateDOMListeners。")]),v._v(" "),e("p",[v._v("updateDOMListeners 就是用来添加事件的方法，在这方法中会根据 vnode 判断是否有定义一个点击事件。如果没有点击事件就 return。有的话就继续执行，给 on 进行赋值，然后进行一些赋值操作，将 vnode.elm 赋值给 target，elm 这个属性就是指向 vnode 所对应的真实 dom 节点，这里就是把我们要绑定事件的 dom 结点进行缓存，接下来执行 updateListeners 方法。在接下来执行 updateListeners 方法中调用了一个 add 的方法，然后在 app 方法中通过原生 addEventListener 把事件绑定到 dom 上。")]),v._v(" "),e("p",[v._v("组件事件绑定原理")]),v._v(" "),e("p",[v._v("在组件实例初始化会调用 initMixin 方法中的 Vue.prototype.*init，在 init 函数中，会通过 initInternalComponent 方法初始化组件信息，将自定义的组件事件放到*parentListeners 上，下来就会调用 initEvents 来初始化组件事件，在 initEvents 中会实例上添加一个 *event 对象，用于保存自定义事件，然后获取到 父组件给 子组件绑定的自定义事件，也就是刚才在初始化组件信息的时候将自定义的组件事件放在了*parentListeners 上，这时候 vm.$options._parentListeners 就是自定义的事件。")]),v._v(" "),e("p",[v._v("最后进行判断，如果有自定义的组件事件就执行 updateComponentListeners 方法进行事件绑定，在 updateComponentListeners 方法中会调用 updateListeners 方法，并传传一个 add 方法进行执行，这个 add 方法里就是$on 方法。")])]),v._v(" "),e("h2",{attrs:{id:"_39-说一下-vue-模版编译的原理是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_39-说一下-vue-模版编译的原理是什么"}},[v._v("#")]),v._v(" 39. 说一下 "),e("em",[v._v("vue")]),v._v(" 模版编译的原理是什么")]),v._v(" "),e("blockquote",[e("p",[v._v("参考答案：")]),v._v(" "),e("p",[v._v("简单说，"),e("em",[v._v("Vue")]),v._v(" 的编译过程就是将 "),e("em",[v._v("template")]),v._v(" 转化为 "),e("em",[v._v("render")]),v._v(" 函数的过程。会经历以下阶段：")]),v._v(" "),e("ul",[e("li",[v._v("生成 "),e("em",[v._v("AST")]),v._v(" 树")]),v._v(" "),e("li",[v._v("优化")]),v._v(" "),e("li",[e("em",[v._v("codegen")])])]),v._v(" "),e("p",[v._v("首先解析模版，生成 "),e("em",[v._v("AST")]),v._v(" 语法树(一种用 "),e("em",[v._v("JavaScript")]),v._v(" 对象的形式来描述整个模板)。 使用大量的正则表达式对模板进行解析，遇到标签、文本的时候都会执行对应的钩子进行相关处理。")]),v._v(" "),e("p",[e("em",[v._v("Vue")]),v._v(" 的数据是响应式的，但其实模板中并不是所有的数据都是响应式的。有一些数据首次渲染后就不会再变化，对应的 "),e("em",[v._v("DOM")]),v._v(" 也不会变化。那么优化过程就是深度遍历 "),e("em",[v._v("AST")]),v._v(" 树，按照相关条件对树节点进行标记。这些被标记的节点(静态节点)我们就可以跳过对它们的比对，对运行时的模板起到很大的优化作用。")]),v._v(" "),e("p",[v._v("编译的最后一步是将优化后的 "),e("em",[v._v("AST")]),v._v(" 树转换为可执行的代码。")])]),v._v(" "),e("blockquote",[e("p",[v._v("可以参阅前面第 "),e("em",[v._v("22")]),v._v(" 题。")])]),v._v(" "),e("h2",{attrs:{id:"_40-delete-和-vue-delete-删除数组的区别是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_40-delete-和-vue-delete-删除数组的区别是什么"}},[v._v("#")]),v._v(" 40. "),e("em",[v._v("delete")]),v._v(" 和 "),e("em",[v._v("Vue.delete")]),v._v(" 删除数组的区别是什么？")]),v._v(" "),e("blockquote",[e("p",[v._v("参考答案：")]),v._v(" "),e("p",[e("em",[v._v("delete")]),v._v(" 只是被删除的元素变成了 "),e("em",[v._v("empty/undefined")]),v._v(" 其他的元素的键值还是不变。\n"),e("em",[v._v("Vue.delete")]),v._v(" 是直接将元素从数组中完全删除，改变了数组其他元素的键值。")])]),v._v(" "),e("h2",{attrs:{id:"_41-v-on-可以实现监听多个方法么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_41-v-on-可以实现监听多个方法么"}},[v._v("#")]),v._v(" 41. "),e("em",[v._v("v-on")]),v._v(" 可以实现监听多个方法么？")]),v._v(" "),e("blockquote",[e("p",[v._v("参考答案：")]),v._v(" "),e("p",[v._v("可以监听多个方法。关于监听多个方法提供了几种不同的写法：")]),v._v(" "),e("div",{staticClass:"language-html extra-class"},[e("pre",{pre:!0,attrs:{class:"language-html"}},[e("code",[v._v("写法一：\n"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("<")]),v._v("div")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[v._v("v-on")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[v._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v('"')]),v._v("{ 事件类型: 事件处理函数, 事件类型: 事件处理函数 }"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v('"')])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(">")])]),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("</")]),v._v("div")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(">")])]),v._v("\n写法二：\n"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("<")]),v._v("div")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[v._v("@事件类型")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[v._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v('"')]),v._v("“事件处理函数”"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v('"')])]),v._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[v._v("@事件类型")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[v._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v('"')]),v._v("“事件处理函数”"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v('"')])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(">")])]),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("</")]),v._v("div")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(">")])]),v._v("\n写法三：在一个事件里面书写多个事件处理函数\n"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("<")]),v._v("div")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[v._v("@事件类型")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[v._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v('"')]),v._v("“事件处理函数1，事件处理函数2”"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v('"')])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(">")])]),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("</")]),v._v("div")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(">")])]),v._v("\n写法四：在事件处理函数内部调用其他的函数\n")])])]),e("p",[v._v("示例代码如下：")]),v._v(" "),e("div",{staticClass:"language-html extra-class"},[e("pre",{pre:!0,attrs:{class:"language-html"}},[e("code",[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("<")]),v._v("template")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(">")])]),v._v("\n  "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("<")]),v._v("div")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(">")])]),v._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[v._v("\x3c!-- v-on在vue2.x中测试,以下两种均可--\x3e")]),v._v("\n    "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("<")]),v._v("button")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[v._v("v-on")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[v._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v('"')]),v._v("{ mouseenter: onEnter, mouseleave: onLeave }"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v('"')])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(">")])]),v._v("\n      鼠标进来1\n    "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("</")]),v._v("button")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(">")])]),v._v("\n    "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("<")]),v._v("button")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[v._v("@mouseenter")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[v._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v('"')]),v._v("onEnter"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v('"')])]),v._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[v._v("@mouseleave")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[v._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v('"')]),v._v("onLeave"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v('"')])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(">")])]),v._v("鼠标进来2"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("</")]),v._v("button")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(">")])]),v._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[v._v("\x3c!-- 一个事件绑定多个函数，按顺序执行，这里分隔函数可以用逗号也可以用分号--\x3e")]),v._v("\n    "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("<")]),v._v("button")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[v._v("@click")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[v._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v('"')]),v._v("a(), b()"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v('"')])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(">")])]),v._v("点我ab"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("</")]),v._v("button")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(">")])]),v._v("\n    "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("<")]),v._v("button")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[v._v("@click")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[v._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v('"')]),v._v("one()"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v('"')])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(">")])]),v._v("点我onetwothree"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("</")]),v._v("button")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(">")])]),v._v("\n  "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("</")]),v._v("div")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(">")])]),v._v("\n"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("</")]),v._v("template")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(">")])]),v._v("\n"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("<")]),v._v("script")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(">")])]),e("span",{pre:!0,attrs:{class:"token script"}},[e("span",{pre:!0,attrs:{class:"token language-javascript"}},[v._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("export")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("default")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n    "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[v._v("methods")]),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v(":")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n      "),e("span",{pre:!0,attrs:{class:"token comment"}},[v._v("//这里是es6对象里函数写法")]),v._v("\n      "),e("span",{pre:!0,attrs:{class:"token function"}},[v._v("a")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n        console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[v._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[v._v('"a"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v("\n      "),e("span",{pre:!0,attrs:{class:"token function"}},[v._v("b")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n        console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[v._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[v._v('"b"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v("\n      "),e("span",{pre:!0,attrs:{class:"token function"}},[v._v("one")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n        console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[v._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[v._v('"one"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[v._v("two")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[v._v("three")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v("\n      "),e("span",{pre:!0,attrs:{class:"token function"}},[v._v("two")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n        console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[v._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[v._v('"two"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v("\n      "),e("span",{pre:!0,attrs:{class:"token function"}},[v._v("three")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n        console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[v._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[v._v('"three"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v("\n      "),e("span",{pre:!0,attrs:{class:"token function"}},[v._v("onEnter")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n        console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[v._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[v._v('"mouse enter"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v("\n      "),e("span",{pre:!0,attrs:{class:"token function"}},[v._v("onLeave")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n        console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[v._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[v._v('"mouse leave"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n")])]),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("</")]),v._v("script")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(">")])]),v._v("\n")])])])]),v._v(" "),e("h2",{attrs:{id:"_42-vue-的数据为什么频繁变化但只会更新一次"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_42-vue-的数据为什么频繁变化但只会更新一次"}},[v._v("#")]),v._v(" 42. "),e("em",[v._v("vue")]),v._v(" 的数据为什么频繁变化但只会更新一次？")]),v._v(" "),e("blockquote",[e("p",[v._v("参考答案：")]),v._v(" "),e("p",[v._v("这是因为 "),e("em",[v._v("vue")]),v._v(" 的 "),e("em",[v._v("DOM")]),v._v(" 更新是一个异步操作，在数据更新后会首先被 "),e("em",[v._v("set")]),v._v(" 钩子监听到，但是不会马上执行 "),e("em",[v._v("DOM")]),v._v(" 更新，而是在下一轮循环中执行更新。")]),v._v(" "),e("p",[v._v("具体实现是 "),e("em",[v._v("vue")]),v._v(" 中实现了一个 "),e("em",[v._v("queue")]),v._v(" 队列用于存放本次事件循环中的所有 "),e("em",[v._v("watcher")]),v._v(" 更新，并且同一个 "),e("em",[v._v("watcher")]),v._v(" 的更新只会被推入队列一次，并在本轮事件循环的微任务执行结束后执行此更新("),e("em",[v._v("UI Render")]),v._v(" 阶段)，这就是 "),e("em",[v._v("DOM")]),v._v(" 只会更新一次的原因。")]),v._v(" "),e("p",[v._v("这种在缓冲时去除重复数据对于避免不必要的计算和 "),e("em",[v._v("DOM")]),v._v(" 操作是非常重要的。然后，在下一个的事件循环“"),e("em",[v._v("tick")]),v._v("”中，"),e("em",[v._v("vue")]),v._v(" 刷新队列并执行实际 (已去重的) 工作。"),e("em",[v._v("vue")]),v._v(" 在内部对异步队列尝试使用原生的 "),e("em",[v._v("Promise.then、MutationObserver")]),v._v(" 和 "),e("em",[v._v("setImmediate")]),v._v("，如果执行环境不支持，则会采用 "),e("em",[v._v("setTimeout(fn, 0)")]),v._v(" 代替。")])]),v._v(" "),e("h2",{attrs:{id:"_43-说一下-vue-中-computed-和-methods-的区别是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_43-说一下-vue-中-computed-和-methods-的区别是什么"}},[v._v("#")]),v._v(" 43. 说一下 "),e("em",[v._v("vue")]),v._v(" 中 "),e("em",[v._v("computed")]),v._v(" 和 "),e("em",[v._v("methods")]),v._v(" 的区别是什么？")]),v._v(" "),e("blockquote",[e("p",[v._v("参考答案：")]),v._v(" "),e("p",[v._v("首先从表现形式上面来看， "),e("em",[v._v("computed")]),v._v(" 和 "),e("em",[v._v("methods")]),v._v(" 的区别大致有下面 "),e("em",[v._v("4")]),v._v(" 点：")]),v._v(" "),e("ol",[e("li",[v._v("在使用时，"),e("em",[v._v("computed")]),v._v(" 当做属性使用，而 "),e("em",[v._v("methods")]),v._v(" 则当做方法调用")]),v._v(" "),e("li",[e("em",[v._v("computed")]),v._v(" 可以具有 "),e("em",[v._v("getter")]),v._v(" 和 "),e("em",[v._v("setter")]),v._v("，因此可以赋值，而 "),e("em",[v._v("methods")]),v._v(" 不行")]),v._v(" "),e("li",[e("em",[v._v("computed")]),v._v(" 无法接收多个参数，而 "),e("em",[v._v("methods")]),v._v(" 可以")]),v._v(" "),e("li",[e("em",[v._v("computed")]),v._v(" 具有缓存，而 "),e("em",[v._v("methods")]),v._v(" 没有")])]),v._v(" "),e("p",[v._v("而如果从底层来看的话， "),e("em",[v._v("computed")]),v._v(" 和 "),e("em",[v._v("methods")]),v._v(" 在底层实现上面还有很大的区别。")]),v._v(" "),e("p",[e("em",[v._v("vue")]),v._v(" 对 "),e("em",[v._v("methods")]),v._v(" 的处理比较简单，只需要遍历 "),e("em",[v._v("methods")]),v._v(" 配置中的每个属性，将其对应的函数使用 "),e("em",[v._v("bind")]),v._v(" 绑定当前组件实例后复制其引用到组件实例中即可")]),v._v(" "),e("p",[v._v("而 "),e("em",[v._v("vue")]),v._v(" 对 "),e("em",[v._v("computed")]),v._v(" 的处理会稍微复杂一些。")]),v._v(" "),e("p",[v._v("具体可以参阅前面第 "),e("em",[v._v("21")]),v._v(" 题。")])]),v._v(" "),e("h2",{attrs:{id:"_44-在-vue-中要获取当前时间你会放到-computed-还是-methods-里-抖音直播"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_44-在-vue-中要获取当前时间你会放到-computed-还是-methods-里-抖音直播"}},[v._v("#")]),v._v(" 44. 在 "),e("em",[v._v("Vue")]),v._v(" 中要获取当前时间你会放到 "),e("em",[v._v("computed")]),v._v(" 还是 "),e("em",[v._v("methods")]),v._v(" 里？(抖音直播)")]),v._v(" "),e("blockquote",[e("p",[v._v("参考答案：")]),v._v(" "),e("p",[v._v("放在 "),e("em",[v._v("computed")]),v._v(" 里面。因为 "),e("em",[v._v("computed")]),v._v(" 只有在它的相关依赖发生改变时才会重新求值。相比而言，方法只要发生重新渲染，"),e("em",[v._v("methods")]),v._v(" 调用总会执行所有函数。")])]),v._v(" "),e("h2",{attrs:{id:"_45-在给-vue-中的元素设置-key-值时可以使用-math-的-random-方法么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_45-在给-vue-中的元素设置-key-值时可以使用-math-的-random-方法么"}},[v._v("#")]),v._v(" 45. 在给 "),e("em",[v._v("vue")]),v._v(" 中的元素设置 "),e("em",[v._v("key")]),v._v(" 值时可以使用 "),e("em",[v._v("Math")]),v._v(" 的 "),e("em",[v._v("random")]),v._v(" 方法么？")]),v._v(" "),e("blockquote",[e("p",[v._v("参考答案：")]),v._v(" "),e("p",[e("em",[v._v("random")]),v._v(" 是生成随机数，有一定概率多个 "),e("em",[v._v("item")]),v._v(" 会生成相同的值，不能保证唯一。")]),v._v(" "),e("p",[v._v("如果是根据数据来生成 "),e("em",[v._v("item")]),v._v("，数据具有 "),e("em",[v._v("id")]),v._v(" 属性，那么就可以使用 "),e("em",[v._v("id")]),v._v(" 来作为 "),e("em",[v._v("key")]),v._v("。")]),v._v(" "),e("p",[v._v("如果不是根据数据生成 "),e("em",[v._v("item")]),v._v("，那么最好的方式就是使用时间戳来作为 "),e("em",[v._v("key")]),v._v("。或者使用诸如 "),e("em",[v._v("uuid")]),v._v(" 之类的库来生成唯一的 "),e("em",[v._v("id")]),v._v("。")])]),v._v(" "),e("h2",{attrs:{id:"_46-插槽与作用域插槽的区别是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_46-插槽与作用域插槽的区别是什么"}},[v._v("#")]),v._v(" 46. 插槽与作用域插槽的区别是什么？")]),v._v(" "),e("blockquote",[e("p",[v._v("参考答案：")]),v._v(" "),e("p",[v._v("插槽的作用是子组件提供了可替换模板，父组件可以更换模板的内容。")]),v._v(" "),e("p",[v._v("作用域插槽给了子组件将数据返给父组件的能力，子组件一样可以复用，同时父组件也可以重新组织内容和样式。")])]),v._v(" "),e("h2",{attrs:{id:"_47-vue-中相同逻辑如何进行抽离"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_47-vue-中相同逻辑如何进行抽离"}},[v._v("#")]),v._v(" 47. "),e("em",[v._v("vue")]),v._v(" 中相同逻辑如何进行抽离？")]),v._v(" "),e("blockquote",[e("p",[v._v("参考答案：")]),v._v(" "),e("p",[v._v("可以使用 "),e("em",[v._v("vue")]),v._v(" 里面的混入（"),e("em",[v._v("mixin")]),v._v("）技术。混入（"),e("em",[v._v("mixin")]),v._v("）提供了一种非常灵活的方式，来将 "),e("em",[v._v("vue")]),v._v(" 中相同的业务逻辑进行抽离。")]),v._v(" "),e("p",[v._v("例如：")]),v._v(" "),e("ul",[e("li",[v._v("在 "),e("em",[v._v("data")]),v._v(" 中有很多是公用数据")]),v._v(" "),e("li",[v._v("引用封装好的组件也都是一样的")]),v._v(" "),e("li",[e("em",[v._v("methods、watch、computed")]),v._v(" 中也都有大量的重复代码")])]),v._v(" "),e("p",[v._v("当然这个时候可以将所有的代码重复去写来实现功能，但是我们并不不推荐使用这种方式，无论是工作量、工作效率和后期维护来说都是不建议的，这个时候 "),e("em",[v._v("mixin")]),v._v(" 就可以大展身手了。")]),v._v(" "),e("p",[v._v("一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项。说白了就是给每个生命周期，函数等等中间加入一些公共逻辑。")]),v._v(" "),e("p",[v._v("混入技术特点")]),v._v(" "),e("ul",[e("li",[v._v("当组件和混入对象含有同名选项时，这些选项将以恰当的方式进行“合并”。比如，数据对象在内部会进行递归合并，并在发生冲突时以组件数据优先。")]),v._v(" "),e("li",[v._v("同名钩子函数将合并为一个数组，因此都将被调用。另外，混入对象的钩子将在组件自身钩子之前调用。")]),v._v(" "),e("li",[v._v("值为对象的选项，例如 "),e("em",[v._v("methods、components")]),v._v(" 和 "),e("em",[v._v("directives")]),v._v("，将被合并为同一个对象。两个对象键名冲突时，取组件对象的键值对。")])])]),v._v(" "),e("h2",{attrs:{id:"_48-如何监听-pushstate-和-replacestate-的变化呢"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_48-如何监听-pushstate-和-replacestate-的变化呢"}},[v._v("#")]),v._v(" 48. 如何监听 "),e("em",[v._v("pushstate")]),v._v(" 和 "),e("em",[v._v("replacestate")]),v._v(" 的变化呢？")]),v._v(" "),e("blockquote",[e("p",[v._v("参考答案：")]),v._v(" "),e("p",[e("em",[v._v("History.replaceState")]),v._v(" 和 "),e("em",[v._v("pushState")]),v._v(" 不会触发 "),e("em",[v._v("popstate")]),v._v(" 事件，所以我们可以通过在方法中创建一个新的全局事件来实现 "),e("em",[v._v("pushstate")]),v._v(" 和 "),e("em",[v._v("replacestate")]),v._v(" 变化的监听。")]),v._v(" "),e("p",[v._v("具体做法为：")]),v._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("var")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[v._v("_wr")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("function")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[v._v("type")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("var")]),v._v(" orig "),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" history"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("[")]),v._v("type"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("return")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("function")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("var")]),v._v(" rv "),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[v._v("orig")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[v._v("apply")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v(" arguments"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("var")]),v._v(" e "),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("new")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("Event")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),v._v("type"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n    e"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),v._v("arguments "),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" arguments"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n    window"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[v._v("dispatchEvent")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),v._v("e"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("return")]),v._v(" rv"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\nhistory"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),v._v("pushState "),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[v._v("_wr")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[v._v('"pushState"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\nhistory"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),v._v("replaceState "),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[v._v("_wr")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[v._v('"replaceState"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n")])])]),e("p",[v._v("这样就创建了 "),e("em",[v._v("2")]),v._v(" 个全新的事件，事件名为 "),e("em",[v._v("pushState")]),v._v(" 和 "),e("em",[v._v("replaceState")]),v._v("，我们就可以在全局监听：")]),v._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[v._v("window"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[v._v("addEventListener")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[v._v('"replaceState"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("function")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[v._v("e")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[v._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[v._v('"THEY DID IT AGAIN! replaceState 111111"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\nwindow"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[v._v("addEventListener")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[v._v('"pushState"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("function")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[v._v("e")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[v._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[v._v('"THEY DID IT AGAIN! pushState 2222222"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n")])])]),e("p",[v._v("这样就可以监听到 "),e("em",[v._v("pushState")]),v._v(" 和 "),e("em",[v._v("replaceState")]),v._v(" 行为。")])]),v._v(" "),e("h2",{attrs:{id:"_49-说一下-vue3-0-是如何变得更快的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_49-说一下-vue3-0-是如何变得更快的"}},[v._v("#")]),v._v(" 49. 说一下 "),e("em",[v._v("vue3.0")]),v._v(" 是如何变得更快的？")]),v._v(" "),e("blockquote",[e("p",[v._v("参考答案：")]),v._v(" "),e("p",[v._v("优化 "),e("em",[v._v("Diff")]),v._v(" 算法")]),v._v(" "),e("p",[v._v("相比 "),e("em",[v._v("Vue 2")]),v._v("，"),e("em",[v._v("Vue 3")]),v._v(" 采用了更加优化的渲染策略。去掉不必要的虚拟 "),e("em",[v._v("DOM")]),v._v(" 树遍历和属性比较，因为这在更新期间往往会产生最大的性能开销。")]),v._v(" "),e("p",[v._v("这里有三个主要的优化：")]),v._v(" "),e("ul",[e("li",[v._v("首先，在 "),e("em",[v._v("DOM")]),v._v(" 树级别。")])]),v._v(" "),e("p",[v._v("在没有动态改变节点结构的模板指令（例如 "),e("em",[v._v("v-if")]),v._v(" 和 "),e("em",[v._v("v-for")]),v._v("）的情况下，节点结构保持完全静态。")]),v._v(" "),e("p",[v._v("当更新节点时，不再需要递归遍历 "),e("em",[v._v("DOM")]),v._v(" 树。所有的动态绑定部分将在一个平面数组中跟踪。这种优化通过将需要执行的树遍历量减少一个数量级来规避虚拟 "),e("em",[v._v("DOM")]),v._v(" 的大部分开销。")]),v._v(" "),e("ul",[e("li",[e("p",[v._v("其次，编译器积极地检测模板中的静态节点、子树甚至数据对象，并在生成的代码中将它们提升到渲染函数之外。这样可以避免在每次渲染时重新创建这些对象，从而大大提高内存使用率并减少垃圾回收的频率。")])]),v._v(" "),e("li",[e("p",[v._v("第三，在元素级别。")])])]),v._v(" "),e("p",[v._v("编译器还根据需要执行的更新类型，为每个具有动态绑定的元素生成一个优化标志。")]),v._v(" "),e("p",[v._v("例如，具有动态类绑定和许多静态属性的元素将收到一个标志，提示只需要进行类检查。运行时将获取这些提示并采用专用的快速路径。")]),v._v(" "),e("p",[v._v("综合起来，这些技术大大改进了渲染更新基准，"),e("em",[v._v("Vue 3.0")]),v._v(" 有时占用的 "),e("em",[v._v("CPU")]),v._v(" 时间不到 "),e("em",[v._v("Vue 2")]),v._v(" 的十分之一。")]),v._v(" "),e("p",[v._v("体积变小")]),v._v(" "),e("p",[v._v("重写后的 "),e("em",[v._v("Vue")]),v._v(" 支持了 "),e("em",[v._v("tree-shaking")]),v._v("，像修剪树叶一样把不需要的东西给修剪掉，使 "),e("em",[v._v("Vue 3.0")]),v._v(" 的体积更小。")]),v._v(" "),e("p",[v._v("需要的模块才会打入到包里，优化后的 "),e("em",[v._v("Vue 3.0")]),v._v(" 的打包体积只有原来的一半（"),e("em",[v._v("13kb")]),v._v("）。哪怕把所有的功能都引入进来也只有 "),e("em",[v._v("23kb")]),v._v("，依然比 "),e("em",[v._v("Vue 2.x")]),v._v(" 更小。像 "),e("em",[v._v("keep-alive、transition")]),v._v(" 甚至 "),e("em",[v._v("v-for")]),v._v(" 等功能都可以按需引入。")]),v._v(" "),e("p",[v._v("并且 "),e("em",[v._v("Vue 3.0")]),v._v(" 优化了打包方法，使得打包后的 "),e("em",[v._v("bundle")]),v._v(" 的体积也更小。")]),v._v(" "),e("p",[v._v("官方所给出的一份惊艳的数据：打包大小减少 "),e("em",[v._v("41%")]),v._v("，初次渲染快 "),e("em",[v._v("55%")]),v._v("，更新快 "),e("em",[v._v("133%")]),v._v("，内存使用减少 "),e("em",[v._v("54%")]),v._v("。")])]),v._v(" "),e("h2",{attrs:{id:"_50-说一说自定义指令有哪些生命周期"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_50-说一说自定义指令有哪些生命周期"}},[v._v("#")]),v._v(" 50. 说一说自定义指令有哪些生命周期？")]),v._v(" "),e("blockquote",[e("p",[v._v("参考答案：")]),v._v(" "),e("p",[v._v("自定义指令的生命周期，有 5 个事件钩子，可以设置指令在某一个事件发生时的具体行为：")]),v._v(" "),e("ul",[e("li",[v._v("bind: 只调用一次，指令第一次绑定到元素时调用，用这个钩子函数可以定义一个在绑定时执行一次的初始化动作。")]),v._v(" "),e("li",[v._v("inserted: 被绑定元素插入父节点时调用（父节点存在即可调用，不必存在于 document 中）。")]),v._v(" "),e("li",[v._v("update: 被绑定元素所在的模板更新时调用，而不论绑定值是否变化。通过比较更新前后的绑定值，可以忽略不必要的模板更新（详细的钩子函数参数见下）。")]),v._v(" "),e("li",[v._v("componentUpdated: 被绑定元素所在模板完成一次更新周期时调用。")]),v._v(" "),e("li",[v._v("unbind: 只调用一次， 指令与元素解绑时调用。")])]),v._v(" "),e("p",[v._v("钩子函数的参数 (包括 el，binding，vnode，oldVnode)")]),v._v(" "),e("ul",[e("li",[v._v("el: 指令所绑定的元素，可以用来直接操作 DOM 。")]),v._v(" "),e("li",[v._v("binding: 一个对象，包含以下属性：name: 指令名、value: 指令的绑定值、oldValue: 指令绑定的前一个值、expression: 绑定值的字符串形式、arg: 传给指令的参数、modifiers: 一个包含修饰符的对象。")]),v._v(" "),e("li",[v._v("vnode: Vue 编译生成的虚拟节点。")]),v._v(" "),e("li",[v._v("oldVnode: 上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用。")])])]),v._v(" "),e("h2",{attrs:{id:"_51-说一说相比-vue3-x-对比-vue2-x-变化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_51-说一说相比-vue3-x-对比-vue2-x-变化"}},[v._v("#")]),v._v(" 51. 说一说相比 "),e("em",[v._v("vue3.x")]),v._v(" 对比 "),e("em",[v._v("vue2.x")]),v._v(" 变化")]),v._v(" "),e("blockquote",[e("p",[v._v("参考答案：")]),v._v(" "),e("ol",[e("li",[v._v("源码组织方式变化：使用 TS 重写")]),v._v(" "),e("li",[v._v("支持 Composition API：基于函数的 API，更加灵活组织组件逻辑（vue2 用的是 options api）")]),v._v(" "),e("li",[v._v("响应式系统提升：Vue3 中响应式数据原理改成 proxy，可监听动态新增删除属性，以及数组变化")]),v._v(" "),e("li",[v._v("编译优化：vue2 通过标记静态根节点优化 diff，Vue3 标记和提升所有静态根节点，diff 的时候只需要对比动态节点内容")]),v._v(" "),e("li",[v._v("打包体积优化：移除了一些不常用的 api（inline-template、filter）")]),v._v(" "),e("li",[v._v("生命周期的变化：使用 setup 代替了之前的 beforeCreate 和 created")]),v._v(" "),e("li",[v._v("Vue3 的 template 模板支持多个根标签")]),v._v(" "),e("li",[v._v("Vuex 状态管理：创建实例的方式改变,Vue2 为 new Store , Vue3 为 createStore")]),v._v(" "),e("li",[v._v("Route 获取页面实例与路由信息：vue2 通过 this 获取 router 实例，vue3 通过使用 getCurrentInstance/ userRoute 和 userRouter 方法获取当前组件实例")]),v._v(" "),e("li",[v._v("Props 的使用变化：vue2 通过 this 获取 props 里面的内容，vue3 直接通过 props")]),v._v(" "),e("li",[v._v("父子组件传值：vue3 在向父组件传回数据时，如使用的自定义名称，如 backData，则需要在 emits 中定义一下")])])]),v._v(" "),e("h2",{attrs:{id:"_52-vue-为什么采用异步渲染"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_52-vue-为什么采用异步渲染"}},[v._v("#")]),v._v(" 52. "),e("em",[v._v("vue")]),v._v(" 为什么采用异步渲染")]),v._v(" "),e("blockquote",[e("p",[v._v("参考答案：")]),v._v(" "),e("p",[v._v("因为如果不采用异步更新，那么每次更新数据都会对当前组件进行重新渲染；所以为了性能考虑，"),e("em",[v._v("Vue")]),v._v(" 会在本轮数据更新后，再去异步更新视图。")]),v._v(" "),e("p",[v._v("异步渲染的原理：")]),v._v(" "),e("ol",[e("li",[v._v("调用 "),e("em",[v._v("notify( )")]),v._v(" 方法，通知 "),e("em",[v._v("watcher")]),v._v(" 进行更新操作")]),v._v(" "),e("li",[v._v("依次调用 watcher 的 update 方法")]),v._v(" "),e("li",[v._v("对 watcher 进行去重操作（通过 id）放到队列里")]),v._v(" "),e("li",[v._v("执行完后异步清空这个队列，nextTick（flushSchedulerQueue）进行批量更新操作")])])]),v._v(" "),e("h2",{attrs:{id:"_53-组件中写-name-选项有哪些好处"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_53-组件中写-name-选项有哪些好处"}},[v._v("#")]),v._v(" 53. 组件中写 "),e("em",[v._v("name")]),v._v(" 选项有哪些好处")]),v._v(" "),e("blockquote",[e("p",[v._v("参考答案：")]),v._v(" "),e("ol",[e("li",[v._v("可以通过名字找到对应的组件（ 递归组件：组件自身调用自身 ）")]),v._v(" "),e("li",[v._v("可以通过 "),e("em",[v._v("name")]),v._v(" 属性实现缓存功能（"),e("em",[v._v("keep-alive")]),v._v("）")]),v._v(" "),e("li",[v._v("可以通过 "),e("em",[v._v("name")]),v._v(" 来识别组件（跨级组件通信时非常重要）")]),v._v(" "),e("li",[v._v("使用 "),e("em",[v._v("vue-devtools")]),v._v(" 调试工具里显示的组见名称是由 "),e("em",[v._v("vue")]),v._v(" 中组件 "),e("em",[v._v("name")]),v._v(" 决定的")])])])])}),[],!1,null,null,null);e.default=a.exports}}]);